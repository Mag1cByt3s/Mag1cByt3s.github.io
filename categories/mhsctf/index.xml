<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>mhsctf - Category - Pascal's Blog</title><link>https://blog.ppeinecke.de/categories/mhsctf/</link><description>mhsctf - Category - Pascal's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 11 Mar 2022 14:57:15 +0100</lastBuildDate><atom:link href="https://blog.ppeinecke.de/categories/mhsctf/" rel="self" type="application/rss+xml"/><item><title>MHSCTF - Web - Et tu, Brute?</title><link>https://blog.ppeinecke.de/posts/mhsctf-web-et-tu-brute/</link><pubDate>Fri, 11 Mar 2022 14:57:15 +0100</pubDate><guid>https://blog.ppeinecke.de/posts/mhsctf-web-et-tu-brute/</guid><description><![CDATA[<div class="featured-image">
                <img src="/featuredImages/brute-force-attack.png" referrerpolicy="no-referrer">
            </div><h1 id="web---et-tu-brute---writeup">Web - Et tu, Brute? - writeup</h1>
<h2 id="description">Description</h2>
<p>I want to see how many people are actually my friends and aren&rsquo;t just pretending! Only my best friends get flags. You can check our friendship status at this website. mhsctf-ettubrute.0xmmalik.repl.co (you may need to wait for the site to wake up)</p>
<h2 id="writeup">Writeup</h2>
<p>So I went ahead and wrote a simple brute force program in python:</p>
<pre><code class="language-python">#!/usr/bin/env python3

import requests
from requests.adapters import HTTPAdapter
from requests.packages.urllib3.util.retry import Retry

# the url we are going to post to 
url='https://mhsctf-ettubrute.0xmmalik.repl.co/status.php'

# the two parameters we need to bruteforce
# they are integers between 1 and 100
number=0
number2=0

# define the 'failed' response
failed=&quot;Sorry, you're clearly not my friend if you don't know my favorite and second favorite numbers!&quot;

session = requests.Session()
retry = Retry(connect=3, backoff_factor=0.5)
adapter = HTTPAdapter(max_retries=retry)
session.mount('http://', adapter)
session.mount('https://', adapter)

# iterate through the possible combinations using two nested for loops
for number in range(100):
	for number2 in range(100):
		postobj = {'number': number, 'number2': number2}
		result = session.post(url, data = postobj)
		if (result.text != failed): 
			print('got the flag: ')
			print(result.text)
</code></pre>
<p>After some minutes of running my bruteforce utility i got the following response:</p>
<pre><code>got the flag: 
Wow! You must really be my friend if you know my favorite and second favorite numbers! Here's a flag for you: flag{pur3_s7r3ngth}
</code></pre>
<p>So the flag is</p>
<pre><code>flag{pur3_s7r3ngth}
</code></pre>
]]></description></item><item><title>MHSCTF - General - Where the Wildcards Are 2</title><link>https://blog.ppeinecke.de/posts/mhsctf-general-where-the-wildcards-are-2/</link><pubDate>Fri, 11 Mar 2022 14:54:29 +0100</pubDate><guid>https://blog.ppeinecke.de/posts/mhsctf-general-where-the-wildcards-are-2/</guid><description><![CDATA[<div class="featured-image">
                <img src="/featuredImages/wildcard.png" referrerpolicy="no-referrer">
            </div><h1 id="general---where-the-wildcards-are-2---writeup">General - Where the Wildcards Are 2 - writeup</h1>
<h2 id="writeup">Writeup</h2>
<h2 id="match-all-lowercase-letters">Match all lowercase letters:</h2>
<pre><code>[a-z]
</code></pre>
<h2 id="match-all-lowercase-letters-which-are-followed-by-two-or-more-capital-letters-then-three-or-more-digits-the-capital-letters-and-digits-should-not-be-included-in-the-match">Match all lowercase letters which are followed by two or more capital letters then three or more digits: (the capital letters and digits should not be included in the match)</h2>
<pre><code>[a-z](?=[A-Z]{2,}[0-9]{3,})
</code></pre>
<h2 id="match-all-numbers-letters-or-underscores-using-the-shortest-possible-pattern">Match all numbers, letters, or underscores using the shortest possible pattern</h2>
<pre><code>\w
</code></pre>
<pre><code>Flag: flag{m@tc#_mak3r}
</code></pre>
]]></description></item><item><title>MHSCTF - Forensics - Blatant Corruption</title><link>https://blog.ppeinecke.de/posts/mhsctf-forensics-blatant-corruption/</link><pubDate>Fri, 11 Mar 2022 14:48:13 +0100</pubDate><guid>https://blog.ppeinecke.de/posts/mhsctf-forensics-blatant-corruption/</guid><description><![CDATA[<div class="featured-image">
                <img src="/featuredImages/corrupted.jpg" referrerpolicy="no-referrer">
            </div><h1 id="forensics---blatant-corruption---writeup">Forensics - Blatant Corruption - writeup</h1>
<h2 id="writeup">Writeup</h2>
<p>so the file is broken.</p>
<p>If we open the file with a hex editor we can see that the file header &ldquo;.PNG&rdquo; is missing
at the top although it is a .png file.</p>
<p>So if we insert the hex bytes</p>
<pre><code>89 50 4E 47
</code></pre>
<p>at the very top of the file
which translates to .PNG and we save the modified file we can now open the file successfully.</p>
<p>the revealed flag is:</p>
<pre><code>flag{str@ight_n_narr0w}
</code></pre>
]]></description></item><item><title>MHSCTF - Forensics - Blank Slate</title><link>https://blog.ppeinecke.de/posts/mhsctf-forensics-blank-slate/</link><pubDate>Fri, 11 Mar 2022 14:45:45 +0100</pubDate><guid>https://blog.ppeinecke.de/posts/mhsctf-forensics-blank-slate/</guid><description><![CDATA[<div class="featured-image">
                <img src="/featuredImages/blank.jpg" referrerpolicy="no-referrer">
            </div><h1 id="forensics---blank-slate---writeup">Forensics - Blank Slate - writeup</h1>
<h2 id="writeup">Writeup</h2>
<p>by simply cat&rsquo;ing out the raw file I can see</p>
<pre><code>flag{get_grepped}
</code></pre>
]]></description></item><item><title>MHSCTF - Crypto - What's Cooking?</title><link>https://blog.ppeinecke.de/posts/mhsctf-crypto-whats-cooking/</link><pubDate>Fri, 11 Mar 2022 14:42:11 +0100</pubDate><guid>https://blog.ppeinecke.de/posts/mhsctf-crypto-whats-cooking/</guid><description><![CDATA[<div class="featured-image">
                <img src="/featuredImages/base64.png" referrerpolicy="no-referrer">
            </div><h1 id="crypto---whats-cooking---writeup">Crypto - What&rsquo;s Cooking? - writeup</h1>
<h2 id="writeup">Writeup</h2>
<pre><code>65 141 40 66 144 40 67 70 40 66 70 40 65 141 40 63 63 40 67 64 40 67 64 40 66 62 40 65 67 40 63 61 40 66 66 40 66 63 40 64 65 40 64 61 40 66 142 40 66 64 40 64 67 40 64 66 40 63 71
</code></pre>
<p>According to cyberchef it is octal =&gt; hex =&gt; base64</p>
<p>From_Octal(&lsquo;Space&rsquo;)
From_Hex(&lsquo;Space&rsquo;)
From_Base64(&lsquo;A-Za-z0-9+/=&rsquo;,true)</p>
<pre><code>            	flag{mmm_p@$ta}
            	Valid UTF8
</code></pre>
<p>Entropy: 3.46</p>
<pre><code>            From_Octal('Space')
</code></pre>
<p>From_Hex(&lsquo;Space&rsquo;)
From_Base64(&lsquo;A-Za-z0-9-_&rsquo;,true)</p>
<pre><code>            	flag{mmm_p@$ta}
            	Valid UTF8
</code></pre>
<p>Entropy: 3.46</p>
<pre><code>            From_Octal('Space')
</code></pre>
<p>From_Hex(&lsquo;Space&rsquo;)
From_Base64(&lsquo;A-Za-z0-9+\-=&rsquo;,true)</p>
<pre><code>            	flag{mmm_p@$ta}
            	Valid UTF8
</code></pre>
<p>Entropy: 3.46</p>
<pre><code>            From_Octal('Space')
</code></pre>
<p>From_Hex(&lsquo;Space&rsquo;)
From_Base64(&lsquo;A-Za-z0-9_.&rsquo;,true)</p>
<pre><code>            	flag{mmm_p@$ta}
            	Valid UTF8
</code></pre>
<p>Entropy: 3.46</p>
<pre><code>            From_Octal('Space')
</code></pre>
<p>From_Hex(&lsquo;Space&rsquo;)
From_Base64(&lsquo;A-Za-z0-9._-&rsquo;,true)</p>
<pre><code>            	flag{mmm_p@$ta}
            	Valid UTF8
</code></pre>
<p>Entropy: 3.46</p>
<pre><code>Flag: flag{mmm_p@$ta}
</code></pre>
]]></description></item><item><title>MHSCTF - Crypto - Em Dee 2</title><link>https://blog.ppeinecke.de/posts/mhsctf-crypto-em-dee-2/</link><pubDate>Fri, 11 Mar 2022 14:35:29 +0100</pubDate><guid>https://blog.ppeinecke.de/posts/mhsctf-crypto-em-dee-2/</guid><description><![CDATA[<div class="featured-image">
                <img src="/featuredImages/binary.jpg" referrerpolicy="no-referrer">
            </div><h1 id="crypto---em-dee---writeup">Crypto - Em Dee - writeup</h1>
<h2 id="description">Description</h2>
<p>Another super-secret message from Em!</p>
<p>What does this one mean?</p>
<pre><code>b4b11af47f3086ce1293df4908d026d4 
</code></pre>
<p>Remember to enter your answer in the &ldquo;flag{&hellip;}&rdquo; format!</p>
<p>Hint: If at first you don&rsquo;t succeed, try, try again.</p>
<h2 id="writeup">Writeup</h2>
<p>Looks like an MD5 hash</p>
<p><a href="md5online.org" rel=""></a> found the hash:</p>
<pre><code>Found : zero_cool
(hash = b4b11af47f3086ce1293df4908d026d4)
</code></pre>
<pre><code>flag{zero_cool}
</code></pre>
]]></description></item><item><title>MHSCTF - Crypto - Em Dee</title><link>https://blog.ppeinecke.de/posts/mhsctf-crypto-em-dee/</link><pubDate>Fri, 11 Mar 2022 14:24:10 +0100</pubDate><guid>https://blog.ppeinecke.de/posts/mhsctf-crypto-em-dee/</guid><description><![CDATA[<div class="featured-image">
                <img src="/featuredImages/binary.jpg" referrerpolicy="no-referrer">
            </div><h1 id="crypto---em-dee---writeup">Crypto - Em Dee - writeup</h1>
<h2 id="description">Description</h2>
<p>I have a good friend named Em. She loves secret codes, so when she challenged me this time, I was well up for it! She told me that she encoded the word &ldquo;happy&rdquo; as &ldquo;56ab24c15b72a457069c5ea42fcfc640&rdquo; and &ldquo;sad&rdquo; as &ldquo;49f0bad299687c62334182178bfd75d8&rdquo; (without the quotes) and challenged me to encode &ldquo;mhsctf&rdquo; using her method! I can&rsquo;t figure it out! What would it be? Enter your answer in flag format: &ldquo;flag{&hellip;}&rdquo;</p>
<h2 id="writeup">Writeup</h2>
<p>So i fired up <a href="https://crackstation.net" target="_blank" rel="noopener noreffer">CrackStation</a> and it turns out that the encoded hashes are MD5 hashes.</p>
<p><code>happy</code> encoded in MD5 equals to <code>56ab24c15b72a457069c5ea42fcfc640</code>
<code>sad</code> encoded in MD5 equals to <code>49f0bad299687c62334182178bfd75d8</code></p>
<p><code>mhsctf</code> encoded in MD5 is <code>fc3e3c405a66f8fe7cb7f17a838ea88c</code></p>
<pre><code>flag: flag{fc3e3c405a66f8fe7cb7f17a838ea88c}
</code></pre>
]]></description></item></channel></rss>