<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>forensics - Category - Pascal's Blog</title><link>https://blog.ppeinecke.de/categories/forensics/</link><description>forensics - Category - Pascal's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 06 Apr 2022 15:12:22 +0200</lastBuildDate><atom:link href="https://blog.ppeinecke.de/categories/forensics/" rel="self" type="application/rss+xml"/><item><title>picoCTF - Reverse Engineering - Bbbbloat</title><link>https://blog.ppeinecke.de/posts/picoctf-reverse-engineering-bbbbloat/</link><pubDate>Wed, 06 Apr 2022 15:12:22 +0200</pubDate><guid>https://blog.ppeinecke.de/posts/picoctf-reverse-engineering-bbbbloat/</guid><description><![CDATA[<div class="featured-image">
                <img src="/featuredImages/picoCTF_logo.png" referrerpolicy="no-referrer">
            </div><h1 id="forensics---bbbbloat---writeup">Forensics - Bbbbloat - writeup</h1>
<h2 id="description">description</h2>
<p>Can you get the flag?</p>
<p>Reverse engineer this <!-- raw HTML omitted -->binary<!-- raw HTML omitted -->.</p>
<h2 id="writeup">writeup</h2>
<p>After loading the binary into Ghidra and browsing the decompiled
code I noticed this function:</p>
<pre><code class="language-c">undefined8 FUN_00101307(void)
{
  char *__s;
  long in_FS_OFFSET;
  int local_48;
  undefined8 local_38;
  undefined8 local_30;
  undefined8 local_28;
  undefined8 local_20;
  long local_10;

  local_10 = *(long *)(in_FS_OFFSET + 0x28);
  local_38 = 0x4c75257240343a41;
  local_30 = 0x3062396630664634;
  local_28 = 0x33343066635f3d33;
  local_20 = 0x4e5f3463665f34;
  printf(&quot;What\'s my favorite number? &quot;);
  __isoc99_scanf();
  if (local_48 == 0x86187) {
    __s = (char *)FUN_00101249(0,&amp;local_38);
    fputs(__s,stdout);
    putchar(10);
    free(__s);
  }
  else {
    puts(&quot;Sorry, that\'s not it!&quot;);
  }
  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {
                    /* WARNING: Subroutine does not return */
    __stack_chk_fail();
  }
  return 0;
}
</code></pre>
<p>The interesting lines here are those:</p>
<pre><code class="language-c">if (local_48 == 0x86187) {
    __s = (char *)FUN_00101249(0,&amp;local_38);
    fputs(__s,stdout);
    putchar(10);
    free(__s);
}
else {
        puts(&quot;Sorry, that\'s not it!&quot;);
}
</code></pre>
<p>Here the program compares the user input with a string.</p>
<p>&rsquo;local_48&rsquo; is the user input.</p>
<p>&lsquo;0x86187&rsquo; is a hex string / number.</p>
<p>If we convert 86187 from hex to decimal we get 549255.</p>
<p>If I now try to supply 549255 as the input I get the following:</p>
<pre><code class="language-bash">What's my favorite number? 549255
picoCTF{cu7_7h3_bl047_cbc074c0}
</code></pre>
<p>That was the correct number.</p>
<p>The flag is:</p>
<pre><code>picoCTF{cu7_7h3_bl047_cbc074c0}
</code></pre>
]]></description></item><item><title>picoCTF - Forensics - St3g0</title><link>https://blog.ppeinecke.de/posts/picoctf-forensics-st3g0/</link><pubDate>Wed, 06 Apr 2022 15:08:21 +0200</pubDate><guid>https://blog.ppeinecke.de/posts/picoctf-forensics-st3g0/</guid><description><![CDATA[<div class="featured-image">
                <img src="/featuredImages/picoCTF_logo.png" referrerpolicy="no-referrer">
            </div><h1 id="forensics---st3g0---writeup">Forensics - St3g0 - writeup</h1>
<h2 id="description">description</h2>
<p>Download this featuredImage and find the flag.</p>
<p><!-- raw HTML omitted -->Download featuredImage<!-- raw HTML omitted --></p>
<h2 id="writeup">writeup</h2>
<p>Ok so let&rsquo;s download the file first &hellip;</p>
<pre><code class="language-bash">wget https://artifacts.picoctf.net/c/427/pico.flag.png
</code></pre>
<p>Let&rsquo;s check the file type just to make sure we actually
have a .png file here &hellip;</p>
<pre><code class="language-bash">file pico.flag.png

pico.flag.png: PNG featuredImage data, 585 x 172, 8-bit/color RGBA, non-interlaced
</code></pre>
<p>Ok so it is in fact a PNG file.</p>
<p>Let&rsquo;s check for any steganography using stegdetect</p>
<pre><code class="language-bash">stegdetect ./pico.flag.png 
./pico.flag.png : error: Not a JPEG file: starts with 0x89 0x50
</code></pre>
<p>we get an error from stegdetect since steganography usually is only possible
using JPEG files.</p>
<p>If I take a look at the hex bytes I can see the .PNG magic bytes of</p>
<pre><code class="language-bash">hexdump -C -n 8 ./pico.flag.png

00000000  89 50 4e 47 0d 0a 1a 0a    |.PNG....|
00000008
</code></pre>
<p>So it is really a png file.</p>
<p>Looking at the hex dump I cannot seem to find anything
remotely interesting &hellip;</p>
<p>Using the strings command I also did not find anything &hellip;</p>
<p>Using stegsolve also did not lead to anything &hellip;</p>
<p>After checking with zsteg for any hidden strings I found the flag!</p>
<pre><code class="language-bash">zsteg -a -v pico.flag.png | grep picoCTF

b1,rgb,lsb,xy       .. text: &quot;picoCTF{7h3r3_15_n0_5p00n_4706df81}$t3g0&quot;
    00000000: 70 69 63 6f 43 54 46 7b  37 68 33 72 33 5f 31 35  |picoCTF{7h3r3_15|
</code></pre>
<p>So this is the flag:</p>
<pre><code>picoCTF{7h3r3_15_n0_5p00n_4706df81}
</code></pre>
]]></description></item><item><title>picoCTF - Forensics - Sleuthkit Apprentice</title><link>https://blog.ppeinecke.de/posts/picoctf-forensics-sleuthkit-apprentice/</link><pubDate>Wed, 06 Apr 2022 15:05:06 +0200</pubDate><guid>https://blog.ppeinecke.de/posts/picoctf-forensics-sleuthkit-apprentice/</guid><description><![CDATA[<div class="featured-image">
                <img src="/featuredImages/picoCTF_logo.png" referrerpolicy="no-referrer">
            </div><h1 id="forensics---sleuthkit-apprentice---writeup">Forensics - Sleuthkit Apprentice - writeup</h1>
<h2 id="description">description</h2>
<p>Download this disk featuredImage and find the flag.
Note: if you are using the webshell, download and
extract the disk featuredImage into /tmp not your home directory.</p>
<p><!-- raw HTML omitted -->Download compressed disk featuredImage<!-- raw HTML omitted --></p>
<h2 id="writeup">writeup</h2>
<p>So we a got a file &lsquo;disk.flag.img&rsquo;.</p>
<p>I will try to create a folder and mount the disk
featuredImage into that folder first.</p>
<pre><code class="language-bash">mkdir mnt

mount ./disk.flag.img mnt 
mount: mnt: failed to setup loop device for /home/pascal/Pentesting/picoCTF_2022/Forensics/Sleuthkit Apprentice/disk.flag.img.
</code></pre>
<p>Ok so that did not work.</p>
<p>If I check using the file command what that file actually is
I see that it is a &lsquo;DOS/MBR boot sector&rsquo;
So it is using a dos (MBR) partition table</p>
<pre><code class="language-bash">file disk.flag.img  

disk.flag.img: DOS/MBR boot sector; partition 1 : ID=0x83, active, start-CHS (0x0,32,33), end-CHS (0xc,223,19), startsector 2048, 204800 sectors; partition 2 : ID=0x82, start-CHS (0xc,223,20), end-CHS (0x16,111,25), startsector 206848, 153600 sectors; partition 3 : ID=0x83, start-CHS (0x16,111,26), end-CHS (0x26,62,24), startsector 360448, 253952 sectors
</code></pre>
<p>Let&rsquo;s check with fdisk what partitions are there.
We already saw 3 partitions inside that partition table.</p>
<pre><code class="language-bash">fdisk -l disk.flag.img      
                                                                     
Disk disk.flag.img: 300 MiB, 314572800 bytes, 614400 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: dos
Disk identifier: 0x7389e82d

Device         Boot  Start    End Sectors  Size Id Type
disk.flag.img1 *      2048 206847  204800  100M 83 Linux
disk.flag.img2      206848 360447  153600   75M 82 Linux swap / Solaris
disk.flag.img3      360448 614399  253952  124M 83 Linux
</code></pre>
<p>The first partition &lsquo;disk.flag.img1&rsquo; is a boot partition.
We can see that because of the fact that the boot flag is
activated. Also the start of 2048 and the size of 100 Megabytes
indicates that this might be a boot partition.</p>
<p>The second partition &lsquo;disk.flag.img2&rsquo; is a swap partition.
That is indicated by the partition type &lsquo;Linux swap / Solaris&rsquo;.</p>
<p>The third partition &lsquo;disk.flag.img3&rsquo; is most probably
a root partition. With a size of 124 Megabytes this is the biggest
partition and the type is &lsquo;Linux&rsquo;. So it is probbaly EXT4.</p>
<p>After running parted I tried to find the start sector of the third partition:</p>
<pre><code class="language-bash">parted disk.flag.img

WARNING: You are not superuser.  Watch out for permissions.
GNU Parted 3.4
Using /home/pascal/Pentesting/picoCTF_2022/Forensics/Sleuthkit Apprentice/disk.flag.img
Welcome to GNU Parted! Type 'help' to view a list of commands.
(parted) u                                                                
Unit?  [compact]? B                                                       
(parted) print                                                            
Model:  (file)
Disk /home/pascal/Pentesting/picoCTF_2022/Forensics/Sleuthkit Apprentice/disk.flag.img: 314572800B
Sector size (logical/physical): 512B/512B
Partition Table: msdos
Disk Flags: 

Number  Start       End         Size        Type     File system     Flags
 1      1048576B    105906175B  104857600B  primary  ext4            boot
 2      105906176B  184549375B  78643200B   primary  linux-swap(v1)
 3      184549376B  314572799B  130023424B  primary  ext4
</code></pre>
<p>Then I tried to mount the third partition using an offset of 184549376</p>
<pre><code class="language-bash">mount -t ext4 -o loop,offset=184549376 disk.flag.img ./mnt
</code></pre>
<p>But that fails</p>
<pre><code class="language-bash">mount: ./mnt: failed to setup loop device for /home/pascal/Pentesting/picoCTF_2022/Forensics/Sleuthkit Apprentice/disk.flag.img
</code></pre>
<p>I ended up with a simple bash script to mount the loop device:</p>
<pre><code class="language-bash">#!/usr/bin/bash

img=&quot;disk.flag.img&quot;

dev=&quot;$(sudo losetup --show -f -P &quot;$img&quot;)&quot;

echo &quot;$dev&quot;

for part in &quot;$dev&quot;?*; do
  if [ &quot;$part&quot; = &quot;${dev}p*&quot; ]; then
    part=&quot;${dev}&quot;
  fi
  dst=&quot;mnt/$(basename &quot;$part&quot;)&quot;
  echo &quot;$dst&quot;
  mkdir -p &quot;$dst&quot;
  sudo mount -o loop &quot;$part&quot; &quot;$dst&quot;
done
</code></pre>
<p>Running that script I was able to mount the filesystems into my local &lsquo;mnt&rsquo;
folder.</p>
<pre><code class="language-bash">ls

loop11p1  loop11p2  loop11p3
</code></pre>
<p>loop11p3 is the root partition.</p>
<p>Let&rsquo;s see what we can find here&hellip;.</p>
<pre><code class="language-bash">cd loop11p3
</code></pre>
<p>Maybe there is something in the home directory of the root user &hellip;</p>
<pre><code class="language-bash">ls root

my_folder
</code></pre>
<p>That folder seems interesting &hellip;.</p>
<p>Let&rsquo;s see what is in there&hellip;.</p>
<pre><code class="language-bash">ls root/my_folder

flag.uni.txt
</code></pre>
<p>Could that be our flag?</p>
<p>Let&rsquo;s cat it out!</p>
<pre><code class="language-bash">cat root/my_folder/flag.uni.txt
picoCTF{by73_5urf3r_25b0d0c0}
</code></pre>
<p>Gotcha!</p>
<p>So the flag is</p>
<pre><code>picoCTF{by73_5urf3r_25b0d0c0}
</code></pre>
]]></description></item><item><title>picoCTF - Forensics - Packets Primer</title><link>https://blog.ppeinecke.de/posts/picoctf-forensics-packets-primer/</link><pubDate>Wed, 06 Apr 2022 14:51:19 +0200</pubDate><guid>https://blog.ppeinecke.de/posts/picoctf-forensics-packets-primer/</guid><description><![CDATA[<div class="featured-image">
                <img src="/featuredImages/picoCTF_logo.png" referrerpolicy="no-referrer">
            </div><h1 id="forensics---packets-primer---writeup">Forensics - Packets Primer - writeup</h1>
<h2 id="description">description</h2>
<p>Download the packet capture file and use packet analysis software to find the flag.</p>
<p><!-- raw HTML omitted -->Download packet capture<!-- raw HTML omitted --></p>
<h2 id="writeup">writeup</h2>
<p>Ok so we got a .pcap file as a download:</p>
<pre><code>network-dump.flag.pcap
</code></pre>
<p>Lets look at the content using wireshark.</p>
<pre><code class="language-bash">wireshark -r network-dump.flag.pcap
</code></pre>
<p>I found some interesting traffic:</p>
<pre><code>4       0.001225        10.0.2.15       10.0.2.4        TCP     126     48750 → 9000 [PSH, ACK] Seq=1 Ack=1 Win=64256 Len=60 TSval=2379213157 TSecr=1760620995
</code></pre>
<p>Looking at the hex dump of that transaction I can see the following:</p>
<pre><code>0000   08 00 27 93 ce 73 08 00 27 af 39 9f 08 00 45 00
0010   00 70 50 c2 40 00 40 06 d1 b3 0a 00 02 0f 0a 00
0020   02 04 be 6e 23 28 27 ec d4 b7 bd 26 99 bc 80 18
0030   01 f6 18 75 00 00 01 01 08 0a 8d cf e9 65 68 f0
0040   f1 c3 70 20 69 20 63 20 6f 20 43 20 54 20 46 20
0050   7b 20 70 20 34 20 63 20 6b 20 33 20 37 20 5f 20
0060   35 20 68 20 34 20 72 20 6b 20 5f 20 32 20 65 20
0070   64 20 64 20 37 20 65 20 35 20 38 20 7d 0a
</code></pre>
<p>That translates to the following:</p>
<pre><code>'Îs'¯9EpPÂ@@Ñ³

¾n#('ìÔ·½&amp;¼öu
ÏéehðñÃp i c o C T F { p 4 c k 3 7 _ 5 h 4 r k _ 2 e d d 7 e 5 8 }
</code></pre>
<p>There is our flag!</p>
<p>flag:</p>
<pre><code>p i c o C T F { p 4 c k 3 7 _ 5 h 4 r k _ 2 e d d 7 e 5 8 }
</code></pre>
<p>Lets put that string into cyberchef using the operation &lsquo;Remove whitespace&rsquo;</p>
<p>the result is:</p>
<pre><code>picoCTF{p4ck37_5h4rk_2edd7e58}
</code></pre>
]]></description></item><item><title>picoCTF - Forensics - Redaction gone wrong</title><link>https://blog.ppeinecke.de/posts/picoctf-forensics-redaction-gone-wrong/</link><pubDate>Wed, 06 Apr 2022 14:51:19 +0200</pubDate><guid>https://blog.ppeinecke.de/posts/picoctf-forensics-redaction-gone-wrong/</guid><description><![CDATA[<div class="featured-image">
                <img src="/featuredImages/picoCTF_logo.png" referrerpolicy="no-referrer">
            </div><h1 id="forensics---redaction-gone-wrong---writeup">Forensics - Redaction gone wrong - writeup</h1>
<h2 id="description">description</h2>
<p>Now you DON’T see me.
This report has some critical data in it, some of which
have been redacted correctly, while some were not.
Can you find an important key that was not redacted properly?</p>
<h2 id="writeup">writeup</h2>
<p>By simply opening the pdf file in LibreOffice Draw
I was able to move the black boxes to uncover the flag!</p>
<p>The flag is:</p>
<pre><code>picoCTF{C4n_Y0u_S33_m3_fully} 
</code></pre>
]]></description></item><item><title>picoCTF - Forensics - Operation Orchid</title><link>https://blog.ppeinecke.de/posts/picoctf-forensics-operation-orchid/</link><pubDate>Wed, 06 Apr 2022 14:49:28 +0200</pubDate><guid>https://blog.ppeinecke.de/posts/picoctf-forensics-operation-orchid/</guid><description><![CDATA[<div class="featured-image">
                <img src="/featuredImages/picoCTF_logo.png" referrerpolicy="no-referrer">
            </div><h1 id="forensics---operation-orchid---writeup">Forensics - Operation Orchid - writeup</h1>
<h2 id="description">description</h2>
<p>Download this disk featuredImage and find the flag.</p>
<p>Note: if you are using the webshell, download and
extract the disk featuredImage into /tmp not your home directory.</p>
<p><!-- raw HTML omitted --><a href="https://artifacts.picoctf.net/c/242/disk.flag.img.gz" target="_blank" rel="noopener noreffer">https://artifacts.picoctf.net/c/242/disk.flag.img.gz</a><!-- raw HTML omitted --></p>
<h2 id="writeup">writeup</h2>
<p>Ok let&rsquo;s download the featuredImage first!</p>
<pre><code class="language-bash">wget https://artifacts.picoctf.net/c/242/disk.flag.img.gz
</code></pre>
<p>Next I will extract it.</p>
<pre><code class="language-bash">gunzip disk.flag.img.gz
</code></pre>
<pre><code class="language-bash">file disk.flag.img    

disk.flag.img: DOS/MBR boot sector; partition 1 : ID=0x83, active, start-CHS (0x0,32,33), end-CHS (0xc,223,19), startsector 2048, 204800 sectors; partition 2 : ID=0x82, start-CHS (0xc,223,20), end-CHS (0x19,159,6), startsector 206848, 204800 sectors; partition 3 : ID=0x83, start-CHS (0x19,159,7), end-CHS (0x32,253,11), startsector 411648, 407552 sectors
</code></pre>
<p>That is a dos / mbr boot partition</p>
<p>Let&rsquo;s look at the partitions.</p>
<pre><code class="language-bash">fdisk -l disk.flag.img

Disk disk.flag.img: 400 MiB, 419430400 bytes, 819200 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: dos
Disk identifier: 0xb11a86e3

Device         Boot  Start    End Sectors  Size Id Type
disk.flag.img1 *      2048 206847  204800  100M 83 Linux
disk.flag.img2      206848 411647  204800  100M 82 Linux swap / Solaris
disk.flag.img3      411648 819199  407552  199M 83 Linux
</code></pre>
<p>Let&rsquo;s try to mount the partitions using my bash script again:</p>
<pre><code class="language-bash">#!/usr/bin/bash

img=&quot;disk.flag.img&quot;

dev=&quot;$(sudo losetup --show -f -P &quot;$img&quot;)&quot;

echo &quot;$dev&quot;

for part in &quot;$dev&quot;?*; do
  if [ &quot;$part&quot; = &quot;${dev}p*&quot; ]; then
    part=&quot;${dev}&quot;
  fi
  dst=&quot;mnt/$(basename &quot;$part&quot;)&quot;
  echo &quot;$dst&quot;
  mkdir -p &quot;$dst&quot;
  sudo mount -o loop &quot;$part&quot; &quot;$dst&quot;
done
</code></pre>
<pre><code class="language-bash">./mount_loop.sh 
[sudo] Passwort für pascal: 
/dev/loop11
mnt/loop11p1
mnt/loop11p2
mount: /home/pascal/Pentesting/picoCTF_2022/Forensics/Operation Orchid/mnt/loop11p2: unknown filesystem type 'swap'.
mnt/loop11p3
</code></pre>
<p>Let&rsquo;s look for the flag &hellip;</p>
<pre><code class="language-bash">find . | grep flag

./loop11p3/root/flag.txt.enc
./loop11p3/root/flag.txt
</code></pre>
<p>&rsquo;loop11p3&rsquo; is the root partition.</p>
<p>I found the file /root/flag.txt.enc</p>
<p>Let&rsquo;s see what this is&hellip;</p>
<pre><code class="language-bash">file flag.txt.enc                                                                                                  
flag.txt.enc: openssl enc'd data with salted password
</code></pre>
<p>That&rsquo;s a salted openssl file</p>
<p>I found an ash shell history file!</p>
<pre><code class="language-bash">cat root/.ash_history  

touch flag.txt
nano flag.txt 
apk get nano
apk --help
apk add nano
nano flag.txt 
openssl
openssl aes256 -salt -in flag.txt -out flag.txt.enc -k unbreakablepassword1234567
shred -u flag.txt
ls -al
halt
</code></pre>
<p>The command used to encrypt the flag file was</p>
<pre><code class="language-bash">openssl aes256 -salt -in flag.txt -out flag.txt.enc -k unbreakablepassword1234567
</code></pre>
<p>And we can see that the key is &lsquo;unbreakablepassword1234567&rsquo;</p>
<p>Let&rsquo;s decrypt it using openssl again!</p>
<pre><code class="language-bash">openssl aes256 -d -in flag.txt.enc -out flag.txt -k unbreakablepassword1234567

*** WARNING : deprecated key derivation used.
Using -iter or -pbkdf2 would be better.
bad decrypt
140528353342848:error:06065064:digital envelope routines:EVP_DecryptFinal_ex:bad decrypt:../crypto/evp/evp_enc.c:610:
</code></pre>
<p>We get a few warnings but the decryption worked!</p>
<pre><code class="language-bash">cat flag.txt                                                                                                         
picoCTF{h4un71ng_p457_cc87abb6}
</code></pre>
<p>So the flag is:</p>
<pre><code>picoCTF{h4un71ng_p457_cc87abb6}
</code></pre>
]]></description></item><item><title>picoCTF - Forensics - Operation Oni</title><link>https://blog.ppeinecke.de/posts/picoctf-forensics-operation-oni/</link><pubDate>Wed, 06 Apr 2022 14:47:15 +0200</pubDate><guid>https://blog.ppeinecke.de/posts/picoctf-forensics-operation-oni/</guid><description><![CDATA[<div class="featured-image">
                <img src="/featuredImages/picoCTF_logo.png" referrerpolicy="no-referrer">
            </div><h1 id="forensics---operation-oni---writeup">Forensics - Operation Oni - writeup</h1>
<h2 id="description">description</h2>
<p>Download <!-- raw HTML omitted -->this<!-- raw HTML omitted -->
disk featuredImage, find the key and
log into the remote machine.</p>
<p>Note: if you are using the webshell,
download and extract the disk featuredImage
into /tmp not your home directory.</p>
<h2 id="writeup">writeup</h2>
<p>So I went ahead, fired up the remote machine
and downloaded the disk featuredImage.</p>
<pre><code class="language-bash">wget https://artifacts.picoctf.net/c/372/disk.img.gz
</code></pre>
<p>It is gzip compressed so I first had to decompress it</p>
<pre><code class="language-bash">gunzip disk.img.gz
</code></pre>
<p>Now I have a &lsquo;disk.img&rsquo; file.</p>
<pre><code class="language-bash">file disk.img 

disk.img: DOS/MBR boot sector; partition 1 : ID=0x83, active, start-CHS (0x0,32,33), end-CHS (0xc,223,19), startsector 2048, 204800 sectors; partition 2 : ID=0x83, start-CHS (0xc,223,20), end-CHS (0x1d,81,52), startsector 206848, 264192 sectors
</code></pre>
<p>That is a dos (MBR) partiton table.</p>
<p>Let&rsquo;s look at the partitions.</p>
<pre><code class="language-bash">fdisk -l disk.img 

Disk disk.img: 230 MiB, 241172480 bytes, 471040 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: dos
Disk identifier: 0x0b0051d0

Device     Boot  Start    End Sectors  Size Id Type
disk.img1  *      2048 206847  204800  100M 83 Linux
disk.img2       206848 471039  264192  129M 83 Linux
</code></pre>
<p>Let&rsquo;s try to mount the partitions using my bash script again:</p>
<pre><code class="language-bash">#!/usr/bin/bash

img=&quot;disk.flag.img&quot;

dev=&quot;$(sudo losetup --show -f -P &quot;$img&quot;)&quot;

echo &quot;$dev&quot;

for part in &quot;$dev&quot;?*; do
  if [ &quot;$part&quot; = &quot;${dev}p*&quot; ]; then
    part=&quot;${dev}&quot;
  fi
  dst=&quot;mnt/$(basename &quot;$part&quot;)&quot;
  echo &quot;$dst&quot;
  mkdir -p &quot;$dst&quot;
  sudo mount -o loop &quot;$part&quot; &quot;$dst&quot;
done
</code></pre>
<p>I was able to mount these two partitions:</p>
<p>disk/loop14p1
disk/loop14p2</p>
<p>The first partition is a boot partiton and does not
contain any interesting data.</p>
<p>The second partition is a root partition.</p>
<p>In the directory of the root user I found a public and
a private ssh key.</p>
<pre><code class="language-bash">ls loop14p2/root/.ssh 

id_ed25519  id_ed25519.pub
</code></pre>
<p>I can use these credentials to login to the ssh server
on the remote machine using the following command
that was mentioned in the description of this challenge:</p>
<pre><code>ssh -i key_file -p 49764 ctf-player@saturn.picoctf.net
</code></pre>
<p>So let&rsquo;s first copy the ssh prvivate key:</p>
<pre><code class="language-bash">cp disk/loop14p2/root/.ssh/id_ed25519 ./
</code></pre>
<p>Now let&rsquo;s try to connect to the aforementioned ssh server&hellip;</p>
<pre><code class="language-bash">ssh -i id_ed25519 -p 49764 ctf-player@saturn.picoctf.net
</code></pre>
<p>That does not work because the permission of the ssh key are wrong.</p>
<p>I first have to change the owner to my own username and the permission
of ssh keys are usually 400.</p>
<p>So let&rsquo;s fix that.</p>
<pre><code class="language-bash">sudo chown pascal:pascal id_ed25519
</code></pre>
<pre><code class="language-bash">sudo chmod 400 id_ed25519
</code></pre>
<p>Now the connection works!</p>
<pre><code class="language-bash">ssh -i id_ed25519 -p 49764 ctf-player@saturn.picoctf.net
Welcome to Ubuntu 20.04.3 LTS (GNU/Linux 5.13.0-1017-aws x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

This system has been minimized by removing packages and content that are
not required on a system that users do not log into.

To restore this content, you can run the 'unminimize' command.

The programs included with the Ubuntu system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by
applicable law.

ctf-player@challenge:~$
</code></pre>
<p>In the home directory of that user a a file flag.txt</p>
<pre><code class="language-bash">ctf-player@challenge:~$ pwd
/home/ctf-player

ctf-player@challenge:~$ ls
flag.txt
</code></pre>
<p>Let&rsquo;s cat it out!</p>
<pre><code class="language-bash">ctf-player@challenge:~$ cat flag.txt 

picoCTF{k3y_5l3u7h_339601ed}
</code></pre>
<p>There is our flag!</p>
<pre><code>picoCTF{k3y_5l3u7h_339601ed}
</code></pre>
]]></description></item><item><title>picoCTF - Forensics - Lookey Here</title><link>https://blog.ppeinecke.de/posts/picoctf-forensics-lookey-here/</link><pubDate>Wed, 06 Apr 2022 14:25:47 +0200</pubDate><guid>https://blog.ppeinecke.de/posts/picoctf-forensics-lookey-here/</guid><description><![CDATA[<div class="featured-image">
                <img src="/featuredImages/picoCTF_logo.png" referrerpolicy="no-referrer">
            </div><h1 id="forensics---lookey-here---writeup">Forensics - Lookey here - writeup</h1>
<h2 id="description">description</h2>
<p>Attackers have hidden information in a very large mass of data in the past, maybe they are still doing it. Download the data <!-- raw HTML omitted -->here<!-- raw HTML omitted -->.</p>
<h2 id="writeup">writeup</h2>
<p>looking at the content of the txt file I can see
a lot of random text&hellip;</p>
<pre><code class="language-bash">head anthem.flag.txt

ANTHEM

      by Ayn Rand


        CONTENTS

         PART ONE

         PART TWO
</code></pre>
<p>By simply grepping out picoCTF I could find the flag</p>
<pre><code class="language-bash">cat anthem.flag.txt| grep picoCTF

we think that the men of picoCTF{gr3p_15_@w3s0m3_c91a291d}
</code></pre>
<p>So the flag is</p>
<pre><code>picoCTF{gr3p_15_@w3s0m3_c91a291d}</code></pre>
]]></description></item><item><title>picoCTF - Forensics - File types</title><link>https://blog.ppeinecke.de/posts/picoctf-forensics-file-types/</link><pubDate>Wed, 06 Apr 2022 14:21:10 +0200</pubDate><guid>https://blog.ppeinecke.de/posts/picoctf-forensics-file-types/</guid><description><![CDATA[<div class="featured-image">
                <img src="/featuredImages/picoCTF_logo.png" referrerpolicy="no-referrer">
            </div><h1 id="forensics---file-types---writeup">Forensics - File types - writeup</h1>
<h2 id="description">description</h2>
<p>This file was found among some files marked confidential
but my pdf reader cannot read it, maybe yours can.
You can download the file from <!-- raw HTML omitted -->here<!-- raw HTML omitted -->.</p>
<h2 id="writeup">writeup</h2>
<p>Let&rsquo;s download the file!</p>
<pre><code class="language-bash">wget https://artifacts.picoctf.net/c/329/Flag.pdf
</code></pre>
<p>lets see what file we got here&hellip;</p>
<pre><code class="language-bash">file Flag.pdf
</code></pre>
<pre><code class="language-bash">Flag.pdf: shell archive text
</code></pre>
<p>Looks like this is a shell archive file (.shar)</p>
<p>lets rename the file to a proper file extension first.</p>
<pre><code class="language-bash">cp Flag.pdf Flag.shar 
</code></pre>
<p>Now I will try to simply execute it.</p>
<pre><code class="language-bash">sh ./Flag.shar 
</code></pre>
<p>I get the following output:</p>
<pre><code class="language-bash">x - created lock directory _sh00046.
x - extracting flag (text)
./Flag.shar: 119: uudecode: not found
restore of flag failed
flag: MD5 check failed
x - removed lock directory _sh00046.
</code></pre>
<p>Looks like I am missing uudecode</p>
<p>After a quick google search I found out that I need to install sharutils</p>
<p>So lets install it quick</p>
<pre><code class="language-bash">apt install sharutils
</code></pre>
<p>After running the file Flag.shar again I get a new file called &lsquo;flag&rsquo;
with a lot of nonsense:</p>
<pre><code>!&lt;arch&gt;
flag/           0           0     0     644     1024      `
4�4i�ѵ��F�DѣCC �M4hɦ�Sd��Y�6��&quot;��������ש����5�h���{����������N��▒▒4���Ѡ2
0!�a�                    �0�6�▒2F����&amp;���2&amp;�� �
��y ڀ��
�^��r�e�▒�L�ʿ��H&quot;72�\U#f�*������qCa}�s6��
`�K�I�{Wx�#W5�+f�и-�#i���G�£vV�#��%
�G&gt;.���Z8ѬL×��9�%)�`��1�CxyR��=��9nf�q�!��h����f우��T��6��      ��݆������F�&amp;�ؘbB��uu�!��&quot;`e9P�Q����K3F�Q�k�C���)8
                  ���
!��F5'(5��3�L�@�     ��H���,�hQ&amp;▒�
 k��.Th2�D����`�&gt;;&lt;���▒��&quot;�(HH�]���q
                                    TRAILER!!!
</code></pre>
<p>Cheking with the file command what that file actually is we can see that it is an &lsquo;ar archive&rsquo;</p>
<pre><code class="language-bash">file flag     
flag: current ar archive
</code></pre>
<p>So lets rename the file to flag.ar</p>
<pre><code class="language-bash">cp flag flag.ar
</code></pre>
<p>check the file type again&hellip;</p>
<pre><code class="language-bash">file flag.ar

flag.ar: cpio archive
</code></pre>
<p>rename the file to .cpio</p>
<pre><code class="language-bash">cp flag.ar flag.cpio
</code></pre>
<p>lets extract that cpio archive</p>
<pre><code class="language-bash">cpio -idv &lt; flag.cpio
</code></pre>
<p>We successfully extracted a new file called &lsquo;flag&rsquo;</p>
<p>lets see what that is now:</p>
<pre><code class="language-bash">file flag

flag: bzip2 compressed data, block size = 900k
</code></pre>
<p>Lets extract that with bunzip2 real quick</p>
<pre><code class="language-bash">bunzip2 flag
</code></pre>
<p>We got a file &lsquo;flag.out&rsquo;</p>
<p>lets see what it is:</p>
<pre><code class="language-bash">file flag.out 
flag.out: gzip compressed data, was &quot;flag&quot;, last modified: Tue Mar 15 06:50:51 2022, from Unix, original size modulo 2^32 327
</code></pre>
<p>Lets rename it to a proper file extension again</p>
<pre><code class="language-bash">cp flag.out flag.gz
</code></pre>
<p>Now I will try to extract that gzip file</p>
<pre><code class="language-bash">gunzip flag.gz
</code></pre>
<p>We got a new file flag</p>
<p>lets see what it is this time:</p>
<pre><code class="language-bash">file flag   
flag: lzip compressed data, version: 1
</code></pre>
<p>lets extract it using lunzip</p>
<pre><code class="language-bash">lunzip flag
</code></pre>
<p>we get a new file flag.out</p>
<p>lets see what we have now&hellip;</p>
<pre><code class="language-bash">file flag.out 
flag.out: LZ4 compressed data (v1.4+)
</code></pre>
<p>lets rename it to a proper file extension first&hellip;</p>
<pre><code class="language-bash">cp flag.out flag.lz4
</code></pre>
<p>now i will try to extract it&hellip;</p>
<pre><code class="language-bash">lz4 -d flag.lz4 
Decoding file flag 
flag.lz4             : decoded 264 bytes
</code></pre>
<p>lets check again&hellip;.</p>
<pre><code class="language-bash">file flag    
flag: LZMA compressed data, non-streamed, size 253
</code></pre>
<p>lets rename it to a proper file extension first &hellip;.</p>
<pre><code class="language-bash">cp flag flag.xz
</code></pre>
<p>lets decompress it again&hellip;.</p>
<pre><code class="language-bash">lzma -d flag.xz
</code></pre>
<p>lets check again&hellip;.</p>
<pre><code class="language-bash">file flag      
flag: lzop compressed data - version 1.040, LZO1X-1, os: Unix
</code></pre>
<p>lets extract it &hellip;.</p>
<pre><code class="language-bash">lzop -x flag

lzop: flag: can't decompress to same file
skipping flag [flag]
</code></pre>
<p>Looks like I need to specify a different destination file</p>
<pre><code class="language-bash">lzop flag -d -oflag.new
</code></pre>
<p>Checking with file again it is still an lzop archive</p>
<p>So I will try to extract it again&hellip;</p>
<pre><code class="language-bash">lzop flag.new -d -oflag.new.new
</code></pre>
<p>It is still an lzop file</p>
<pre><code class="language-bash">lzop flag.new.new -d -oflag.new.new.new
</code></pre>
<p>If I now check the filetype</p>
<pre><code class="language-bash">file flag.new.new.new 
flag.new.new.new: lzip compressed data, version: 1
</code></pre>
<p>It is an lzip archive this time&hellip;</p>
<pre><code class="language-bash">lzip -d flag.new.new.new 
</code></pre>
<p>By checking the filetype I get</p>
<pre><code class="language-bash">file flag.new.new.new.out
flag.new.new.new.out: XZ compressed data, checksum CRC64
</code></pre>
<p>let&rsquo;s rename it to a proper extension</p>
<pre><code class="language-bash">cp flag.new.new.new.out flag.new.new.new.xz
</code></pre>
<p>Now extract it one more time&hellip;</p>
<pre><code class="language-bash">unxz flag.new.new.new.xz
</code></pre>
<pre><code class="language-bash">file flag.new.new.new                                                               
flag.new.new.new: ASCII text
</code></pre>
<p>cat&rsquo;ing out this file we finally get some text &hellip;</p>
<pre><code class="language-bash">cat flag.new.new.new

7069636f4354467b66316c656e406d335f6d406e3170756c407431306e5f
6630725f3062326375723137795f32373866316131387d0a
</code></pre>
<p>The first line is hex and translates to</p>
<pre><code>picoCTF{f1len@m3_m@n1pul@t10n_
</code></pre>
<p>The second line is also hex and translates to</p>
<pre><code>f0r_0b2cur17y_278f1a18}
</code></pre>
<p>So the flag is:</p>
<pre><code>picoCTF{f1len@m3_m@n1pul@t10n_f0r_0b2cur17y_278f1a18}
</code></pre>
]]></description></item><item><title>picoCTF - Forensics - Enhance!</title><link>https://blog.ppeinecke.de/posts/picoctf-forensics-enhance/</link><pubDate>Wed, 06 Apr 2022 14:18:09 +0200</pubDate><guid>https://blog.ppeinecke.de/posts/picoctf-forensics-enhance/</guid><description><![CDATA[<div class="featured-image">
                <img src="/featuredImages/picoCTF_logo.png" referrerpolicy="no-referrer">
            </div><h1 id="forensics---enhance---writeup">Forensics - Enhance! - writeup</h1>
<h2 id="description">description</h2>
<p>Download this featuredImage file and find the flag.</p>
<p><!-- raw HTML omitted --> Download featuredImage file <!-- raw HTML omitted --></p>
<h2 id="writeup">writeup</h2>
<p>Ok so I downloaded the featuredImage file drawing.flag.svg</p>
<p>Checking with the file command what that actually is:</p>
<pre><code class="language-bash">file drawing.flag.svg 
drawing.flag.svg: SVG Scalable Vector Graphics featuredImage
</code></pre>
<p>looks like it is actually a svg file.</p>
<p>Lets try to open it using feh e.g.</p>
<pre><code class="language-bash">feh drawing.flag.svg

feh WARNING: drawing.flag.svg - Does not look like an featuredImage (magic bytes missing)
</code></pre>
<p>feh tells me that the magic bytes are missing.</p>
<p>So the first thing to try here is simply adding the magic bytes header of svg
to the top of the file using a hex editor.</p>
<p>It turns out that the magic bytes are in fact present.</p>
<p>I can open the file using eog without any problem.</p>
<p>Looking at the hex code we can see that the featuredImage was made using inkscape:</p>
<pre><code class="language-xml">inkscape:version=&quot;1.1.2 (b8e25be833, 2022-02-05)&quot;
   xmlns:inkscape=&quot;http://www.inkscape.org/namespaces/inkscape&quot;
</code></pre>
<p>After opening the file in firefox and looking at the source code I found the flag:</p>
<pre><code class="language-xml">&lt;text
       xml:space=&quot;preserve&quot;
       style=&quot;font-style:normal;font-weight:normal;font-size:0.00352781px;line-height:1.25;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#ffffff;fill-opacity:1;stroke:none;stroke-width:0.26458332;&quot;
       x=&quot;107.43014&quot;
       y=&quot;132.08501&quot;
       id=&quot;text3723&quot;&gt;&lt;tspan
         sodipodi:role=&quot;line&quot;
         x=&quot;107.43014&quot;
         y=&quot;132.08501&quot;
         style=&quot;font-size:0.00352781px;line-height:1.25;fill:#ffffff;stroke-width:0.26458332;&quot;
         id=&quot;tspan3748&quot;&gt;p &lt;/tspan&gt;&lt;tspan
         sodipodi:role=&quot;line&quot;
         x=&quot;107.43014&quot;
         y=&quot;132.08942&quot;
         style=&quot;font-size:0.00352781px;line-height:1.25;fill:#ffffff;stroke-width:0.26458332;&quot;
         id=&quot;tspan3754&quot;&gt;i &lt;/tspan&gt;&lt;tspan
         sodipodi:role=&quot;line&quot;
         x=&quot;107.43014&quot;
         y=&quot;132.09383&quot;
         style=&quot;font-size:0.00352781px;line-height:1.25;fill:#ffffff;stroke-width:0.26458332;&quot;
         id=&quot;tspan3756&quot;&gt;c &lt;/tspan&gt;&lt;tspan
         sodipodi:role=&quot;line&quot;
         x=&quot;107.43014&quot;
         y=&quot;132.09824&quot;
         style=&quot;font-size:0.00352781px;line-height:1.25;fill:#ffffff;stroke-width:0.26458332;&quot;
         id=&quot;tspan3758&quot;&gt;o &lt;/tspan&gt;&lt;tspan
         sodipodi:role=&quot;line&quot;
         x=&quot;107.43014&quot;
         y=&quot;132.10265&quot;
         style=&quot;font-size:0.00352781px;line-height:1.25;fill:#ffffff;stroke-width:0.26458332;&quot;
         id=&quot;tspan3760&quot;&gt;C &lt;/tspan&gt;&lt;tspan
         sodipodi:role=&quot;line&quot;
         x=&quot;107.43014&quot;
         y=&quot;132.10706&quot;
         style=&quot;font-size:0.00352781px;line-height:1.25;fill:#ffffff;stroke-width:0.26458332;&quot;
         id=&quot;tspan3762&quot;&gt;T &lt;/tspan&gt;&lt;tspan
         sodipodi:role=&quot;line&quot;
         x=&quot;107.43014&quot;
         y=&quot;132.11147&quot;
         style=&quot;font-size:0.00352781px;line-height:1.25;fill:#ffffff;stroke-width:0.26458332;&quot;
         id=&quot;tspan3764&quot;&gt;F { 3 n h 4 n &lt;/tspan&gt;&lt;tspan
         sodipodi:role=&quot;line&quot;
         x=&quot;107.43014&quot;
         y=&quot;132.11588&quot;
         style=&quot;font-size:0.00352781px;line-height:1.25;fill:#ffffff;stroke-width:0.26458332;&quot;
         id=&quot;tspan3752&quot;&gt;c 3 d _ 6 a e 4 2 b b a }&lt;/tspan&gt;&lt;/text&gt;
</code></pre>
<pre><code>Flag: picoCTF{3nh4nc3d_6ae42bba}
</code></pre>
]]></description></item></channel></rss>