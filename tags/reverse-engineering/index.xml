<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>reverse engineering - Tag - Pascal's Blog</title><link>https://blog.ppeinecke.de/tags/reverse-engineering/</link><description>reverse engineering - Tag - Pascal's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 06 Apr 2022 15:29:28 +0200</lastBuildDate><atom:link href="https://blog.ppeinecke.de/tags/reverse-engineering/" rel="self" type="application/rss+xml"/><item><title>picoCTF - Reverse Engineering - unpackme.py</title><link>https://blog.ppeinecke.de/posts/picoctf-reverse-engineering-unpackme.py/</link><pubDate>Wed, 06 Apr 2022 15:29:28 +0200</pubDate><guid>https://blog.ppeinecke.de/posts/picoctf-reverse-engineering-unpackme.py/</guid><description><![CDATA[<div class="featured-image">
                <img src="/featuredImages/picoCTF_logo.png" referrerpolicy="no-referrer">
            </div><h1 id="reverse-engineering---unpackmepy---writeup">Reverse Engineering - unpackme.py - writeup</h1>
<h2 id="description">description</h2>
<p>Can you get the flag?</p>
<p>Reverse engineer this <!-- raw HTML omitted -->Python program<!-- raw HTML omitted -->.</p>
<h2 id="writeup">writeup</h2>
<p>Let&rsquo;s download the python program first.</p>
<pre><code class="language-bash">wget https://artifacts.picoctf.net/c/470/unpackme.flag.py
</code></pre>
<p>I will try to reverse engineer this python code &hellip;</p>
<p>If we take a look at the code:</p>
<pre><code class="language-python">import base64
from cryptography.fernet import Fernet


payload = b'gAAAAABiMD1Ju5_eZeZy7C03K_YcWGDGXfvy5A9b5HzV-uZIYN8syTFGHgLwoRonYtCS0WcDrufxRRXlvNKtyEMqMS0AADLcRNr6VYpLLbKaETF37L22GEg1ok8NutHXK6gy47sBLmxmWWU729b86rzK6IMc2Kg-CR0bMm_fzrbRrWEYSk0WRNnKxy7Juuy-Ss2RjbACKgbwL7HNGATu3hYuPflf3PCKztLRFXCBxijKncKZgt68wYhGnPAzYvUVrdhhtMg9ra7ZKIirltPfKC8iX2DqmR9vVA=='

key_str = 'correctstaplecorrectstaplecorrec'
key_base64 = base64.b64encode(key_str.encode())
f = Fernet(key_base64)
plain = f.decrypt(payload)
exec(plain.decode())
</code></pre>
<p>We can see that some part of the code is missing.</p>
<p>That part is encoded using base64 with a key.</p>
<p>Here is the part that encodes the code:</p>
<pre><code class="language-python">f = Fernet(key_base64)
plain = f.decrypt(payload)
exec(plain.decode())
</code></pre>
<p>We can simply go ahead and modify the program
to show us the encoded code in plaintext:</p>
<pre><code class="language-python">print(plain.decode())
</code></pre>
<p>We get this:</p>
<pre><code class="language-python">pw = input('What\'s the password? ')

if pw == 'batteryhorse':
  print('picoCTF{175_chr157m45_616d21a3}')
else:
  print('That password is incorrect.')
</code></pre>
<p>This is the part that was missing.</p>
<p>And we can immediately see the flag:</p>
<pre><code>picoCTF{175_chr157m45_616d21a3}
</code></pre>
]]></description></item><item><title>picoCTF - Reverse Engineering - Safe Opener</title><link>https://blog.ppeinecke.de/posts/picoctf-reverse-engineering-safe-opener/</link><pubDate>Wed, 06 Apr 2022 15:27:09 +0200</pubDate><guid>https://blog.ppeinecke.de/posts/picoctf-reverse-engineering-safe-opener/</guid><description><![CDATA[<div class="featured-image">
                <img src="/featuredImages/picoCTF_logo.png" referrerpolicy="no-referrer">
            </div><h1 id="reverse-engineering---safe-opener---writeup">Reverse Engineering - Safe Opener - writeup</h1>
<h2 id="description">description</h2>
<p>Can you open this safe?</p>
<p>I forgot the key to my safe but this <!-- raw HTML omitted -->program<!-- raw HTML omitted --> is supposed to help me with retrieving the lost key.</p>
<p>Can you help me unlock my safe?</p>
<p>Put the password you recover into the picoCTF flag format like: picoCTF{password}</p>
<h2 id="writeup">writeup</h2>
<p>The &ldquo;safe&rdquo; is a .java file.</p>
<p>Since .java is used for java source code this should be
fairly easy to reverse engineer.</p>
<p>In the main method of the class &lsquo;SafeOpener&rsquo;,
directly at the top I see this:</p>
<pre><code class="language-java">Base64.Encoder encoder = Base64.getEncoder();
String encodedkey = &quot;&quot;;
</code></pre>
<p>So the key is simply encoded in base64.</p>
<p>Inside the method &lsquo;boolean openSafe(String password)&rsquo;
I found this:</p>
<pre><code class="language-java">String encodedkey = &quot;cGwzYXMzX2wzdF9tM18xbnQwX3RoM19zYWYz&quot;;
</code></pre>
<p>So that is the encoded key.</p>
<p>All I have to do here is to decode the aforementioned key using base64 decoding.</p>
<pre><code class="language-bash">echo -n &quot;cGwzYXMzX2wzdF9tM18xbnQwX3RoM19zYWYz&quot; | base64 -d

pl3as3_l3t_m3_1nt0_th3_saf3
</code></pre>
<p>That should be the correct password.</p>
<p>Let&rsquo;s compile and run that java code&hellip;</p>
<pre><code class="language-bash">javac SafeOpener.java
</code></pre>
<pre><code class="language-bash">java SafeOpener
</code></pre>
<pre><code class="language-bash">Enter password for the safe: pl3as3_l3t_m3_1nt0_th3_saf3
cGwzYXMzX2wzdF9tM18xbnQwX3RoM19zYWYz
Sesame open
</code></pre>
<p>And here we have our flag.</p>
<pre><code>picoCTF{pl3as3_l3t_m3_1nt0_th3_saf3}
</code></pre>
]]></description></item><item><title>picoCTF - Reverse Engineering - patchme.py</title><link>https://blog.ppeinecke.de/posts/picoctf-reverse-engineering-patchme.py/</link><pubDate>Wed, 06 Apr 2022 15:25:17 +0200</pubDate><guid>https://blog.ppeinecke.de/posts/picoctf-reverse-engineering-patchme.py/</guid><description><![CDATA[<div class="featured-image">
                <img src="/featuredImages/picoCTF_logo.png" referrerpolicy="no-referrer">
            </div><h1 id="reverse-engineering---patchmepy---writeup">Reverse Engineering - patchme.py - writeup</h1>
<h2 id="description">description</h2>
<p>Can you get the flag?</p>
<p>Run this <!-- raw HTML omitted -->Python program<!-- raw HTML omitted --> in the same directory as this <!-- raw HTML omitted -->encrypted flag<!-- raw HTML omitted -->.</p>
<h2 id="writeup">writeup</h2>
<p>Let&rsquo;s take a look at the encrypted flag&hellip;</p>
<pre><code class="language-bash">cat flag.txt.enc

CR1@    UYX+
6UB
P\E
</code></pre>
<p>That does not help.</p>
<p>Let&rsquo;s look at the python code&hellip;</p>
<p>Mh that is peculiar:</p>
<pre><code class="language-python">if( user_pw == &quot;ak98&quot; + \
                   &quot;-=90&quot; + \
                   &quot;adfjhgj321&quot; + \
                   &quot;sleuth9000&quot;)
</code></pre>
<p>Let&rsquo;s fire up bpython and input this code:</p>
<pre><code class="language-python">&quot;ak98&quot; + \
                   &quot;-=90&quot; + \
                   &quot;adfjhgj321&quot; + \
                   &quot;sleuth9000&quot;
</code></pre>
<p>This is the result:</p>
<pre><code>'ak98-=90adfjhgj321sleuth9000'
</code></pre>
<p>Once I try to supply the aforementioned string as the password I get this output:</p>
<pre><code>Please enter correct password for flag: ak98-=90adfjhgj321sleuth9000
Welcome back... your flag, user:
picoCTF{p47ch1ng_l1f3_h4ck_e40c120e}
</code></pre>
<p>so the flag is:</p>
<pre><code>picoCTF{p47ch1ng_l1f3_h4ck_e40c120e}
</code></pre>
<p>This is probably not the way that was intended by the author to solve this challenge since the name of it is &lsquo;patchme.py&rsquo;.
But I got the flag nevertheless.</p>
]]></description></item><item><title>picoCTF - Reverse Engineering - file-run2</title><link>https://blog.ppeinecke.de/posts/picoctf-reverse-engineering-file-run2/</link><pubDate>Wed, 06 Apr 2022 15:23:34 +0200</pubDate><guid>https://blog.ppeinecke.de/posts/picoctf-reverse-engineering-file-run2/</guid><description><![CDATA[<div class="featured-image">
                <img src="/featuredImages/picoCTF_logo.png" referrerpolicy="no-referrer">
            </div><h1 id="reverse-engineering---file-run2---writeup">Reverse Engineering - file-run2 - writeup</h1>
<h2 id="description">description</h2>
<p>Another program, but this time, it seems to want some input.
What happens if you try to run it on the command line with input &ldquo;Hello!&rdquo;?</p>
<p>Download the program <!-- raw HTML omitted -->here<!-- raw HTML omitted -->.</p>
<h2 id="writeup">writeup</h2>
<p>by simply executing the file with ./run we get</p>
<pre><code class="language-bash">Run this file with only one argument.
</code></pre>
<p>if I try to supply one argument like this: ./run 1 I get</p>
<pre><code class="language-bash">Won't you say 'Hello!' to me first?
</code></pre>
<p>So once I try to supply an argument like this: ./run Hello! I get</p>
<pre><code class="language-bash">The flag is: picoCTF{F1r57_4rgum3n7_c2db2786}
</code></pre>
]]></description></item><item><title>picoCTF - Reverse Engineering - file-run1</title><link>https://blog.ppeinecke.de/posts/picoctf-reverse-engineering-file-run1/</link><pubDate>Wed, 06 Apr 2022 15:19:34 +0200</pubDate><guid>https://blog.ppeinecke.de/posts/picoctf-reverse-engineering-file-run1/</guid><description><![CDATA[<div class="featured-image">
                <img src="/featuredImages/picoCTF_logo.png" referrerpolicy="no-referrer">
            </div><h1 id="reverse-engineering---file-run1---writeup">Reverse Engineering - file-run1 - writeup</h1>
<h2 id="description">description</h2>
<p>A program has been provided to you, what happens if you
try to run it on the command line?</p>
<p>Download the program here.</p>
<p><!-- raw HTML omitted --><a href="https://artifacts.picoctf.net/c/314/run" target="_blank" rel="noopener noreffer">https://artifacts.picoctf.net/c/314/run</a><!-- raw HTML omitted --></p>
<h2 id="writeup">writeup</h2>
<p>by simply running the program we get the flag:</p>
<pre><code>The flag is: picoCTF{U51N6_Y0Ur_F1r57_F113_ac61264e}
</code></pre>
]]></description></item><item><title>picoCTF - Reverse Engineering - bloat.py</title><link>https://blog.ppeinecke.de/posts/picoctf-reverse-engineering-bloat.py/</link><pubDate>Wed, 06 Apr 2022 15:16:12 +0200</pubDate><guid>https://blog.ppeinecke.de/posts/picoctf-reverse-engineering-bloat.py/</guid><description><![CDATA[<div class="featured-image">
                <img src="/featuredImages/picoCTF_logo.png" referrerpolicy="no-referrer">
            </div><h1 id="reverse-engineering---bloatpy---writeup">Reverse Engineering - bloat.py - writeup</h1>
<h2 id="description">description</h2>
<p>Can you get the flag?</p>
<p>Run this <!-- raw HTML omitted -->Python program<!-- raw HTML omitted -->
in the same directory as this <!-- raw HTML omitted -->encrypted flag.<!-- raw HTML omitted --></p>
<h2 id="writeup">writeup</h2>
<p>So let&rsquo;s download the python program and the encrypted flag first!</p>
<pre><code class="language-bash">wget https://artifacts.picoctf.net/c/434/bloat.flag.py
</code></pre>
<pre><code class="language-bash">wget https://artifacts.picoctf.net/c/434/flag.txt.enc
</code></pre>
<p>Let&rsquo;s make a copy of the python program and try to fix it
using debugging in bpython!</p>
<pre><code class="language-bash">cp bloat.flag.py flag.py
</code></pre>
<p>After a lot of debugging and reverse engineering using bpython I found the flag!</p>
<pre><code class="language-bash">bpython
</code></pre>
<pre><code class="language-python">bpython Version 0.22.1 mit Python 3.9.10 /usr/bin/python3
&gt;&gt;&gt; import sys;
&gt;&gt;&gt; a = &quot;!\&quot;#$%&amp;'()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ &quot;
&gt;&gt;&gt; def arg133(arg432):
...   if arg432 == a[71]+a[64]+a[79]+a[79]+a[88]+a[66]+a[71]+a[64]+a[77]+a[66]+a[68]:
...     return True
...   else:
...     print(a[51]+a[71]+a[64]+a[83]+a[94]+a[79]+a[64]+a[82]+a[82]+a[86]+a[78]+\
... a[81]+a[67]+a[94]+a[72]+a[82]+a[94]+a[72]+a[77]+a[66]+a[78]+a[81]+\
... a[81]+a[68]+a[66]+a[83])
...     sys.exit(0)
...     return False
... 
&gt;&gt;&gt; def arg111(arg444):
...   return arg122(arg444.decode(), a[81]+a[64]+a[79]+a[82]+a[66]+a[64]+a[75]+\
... a[75]+a[72]+a[78]+a[77])
... 
&gt;&gt;&gt; def arg232():
...   return input(a[47]+a[75]+a[68]+a[64]+a[82]+a[68]+a[94]+a[68]+a[77]+a[83]+\
... a[68]+a[81]+a[94]+a[66]+a[78]+a[81]+a[81]+a[68]+a[66]+a[83]+\
... a[94]+a[79]+a[64]+a[82]+a[82]+a[86]+a[78]+a[81]+a[67]+a[94]+\
... a[69]+a[78]+a[81]+a[94]+a[69]+a[75]+a[64]+a[70]+a[25]+a[94])
... 
&gt;&gt;&gt; def arg132():
...   return open('flag.txt.enc', 'rb').read()
... 
&gt;&gt;&gt; pwd()
Traceback (most recent call last):
  File &quot;&lt;input&gt;&quot;, line 1, in &lt;module&gt;
    pwd()
NameError: name 'pwd' is not defined
&gt;&gt;&gt; def arg112():
...   print(a[54]+a[68]+a[75]+a[66]+a[78]+a[76]+a[68]+a[94]+a[65]+a[64]+a[66]+\
... a[74]+a[13]+a[13]+a[13]+a[94]+a[88]+a[78]+a[84]+a[81]+a[94]+a[69]+\
... a[75]+a[64]+a[70]+a[11]+a[94]+a[84]+a[82]+a[68]+a[81]+a[25])
... 
&gt;&gt;&gt; def arg122(arg432, arg423):
...     arg433 = arg423
...     i = 0
...     
...     while len(arg433) &lt; len(arg432):
...         arg433 = arg433 + arg423[i]
...         i = (i + 1) % len(arg423)        
...     
...     return &quot;&quot;.join([chr(ord(arg422) ^ ord(arg442)) for (arg422,arg442) in zip(arg432,arg433)])
... 
&gt;&gt;&gt; arg112()
Welcome back... your flag, user:
&gt;&gt;&gt; def arg232()
  File &quot;&lt;input&gt;&quot;, line 1
    def arg232()
                ^
SyntaxError: invalid syntax
&gt;&gt;&gt; arg232()
Please enter correct password for flag: Traceback (most recent call last):
  File &quot;&lt;input&gt;&quot;, line 1, in &lt;module&gt;
    arg232()
  File &quot;&lt;input&gt;&quot;, line 2, in arg232
    return input(a[47]+a[75]+a[68]+a[64]+a[82]+a[68]+a[94]+a[68]+a[77]+a[83]+\
  File &quot;/usr/lib/python3/dist-packages/bpython/curtsiesfrontend/repl.py&quot;, line 168, in readline
    value = self.coderunner.request_from_main_context()
  File &quot;/usr/lib/python3/dist-packages/bpython/curtsiesfrontend/coderunner.py&quot;, line 200, in request_from_main_
context
    raise KeyboardInterrupt()
KeyboardInterrupt
&gt;&gt;&gt; arg112()
Welcome back... your flag, user:
&gt;&gt;&gt; arg132()
b'\x02\x08\x13\x1c 5*\x17\r\\^\x10\x07\x05F\x00U[]Y\x011\x14V\x07,\x06X\t_Q\x0c\\E\x1c'
&gt;&gt;&gt; arg232()
Please enter correct password for flag: bla
'bla'
&gt;&gt;&gt; arg132()
b'\x02\x08\x13\x1c 5*\x17\r\\^\x10\x07\x05F\x00U[]Y\x011\x14V\x07,\x06X\t_Q\x0c\\E\x1c'
&gt;&gt;&gt; arg232()
Please enter correct password for flag: test
'test'
&gt;&gt;&gt; arg133(arg432)
Traceback (most recent call last):
  File &quot;&lt;input&gt;&quot;, line 1, in &lt;module&gt;
    arg133(arg432)
NameError: name 'arg432' is not defined
&gt;&gt;&gt; arg432 = arg232()
Please enter correct password for flag: test
&gt;&gt;&gt; arg133(arg432)
&gt;&gt;&gt; arg133(arg432)
</code></pre>
<pre><code class="language-bash">bpython
</code></pre>
<pre><code class="language-python">bpython Version 0.22.1 mit Python 3.9.10 /usr/bin/python3
&gt;&gt;&gt; a = &quot;!\&quot;#$%&amp;'()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ &quot;
&gt;&gt;&gt; def arg232():
...   return input(a[47]+a[75]+a[68]+a[64]+a[82]+a[68]+a[94]+a[68]+a[77]+a[83]+\
... a[68]+a[81]+a[94]+a[66]+a[78]+a[81]+a[81]+a[68]+a[66]+a[83]+\
... a[94]+a[79]+a[64]+a[82]+a[82]+a[86]+a[78]+a[81]+a[67]+a[94]+\
... a[69]+a[78]+a[81]+a[94]+a[69]+a[75]+a[64]+a[70]+a[25]+a[94])
... 
&gt;&gt;&gt; print(arg232());
Please enter correct password for flag: 

&gt;&gt;&gt; arg122(arg444.decode(), a[81]+a[64]+a[79]+a[82]+a[66]+a[64]+a[75]+\
... a[75]+a[72]+a[78]+a[77])
Traceback (most recent call last):
  File &quot;&lt;input&gt;&quot;, line 1, in &lt;module&gt;
    arg122(arg444.decode(), a[81]+a[64]+a[79]+a[82]+a[66]+a[64]+a[75]+\
NameError: name 'arg122' is not defined
&gt;&gt;&gt; def arg122(arg432, arg423):
...     arg433 = arg423
...     i = 0
...     
...     while len(arg433) &lt; len(arg432):
...         arg433 = arg433 + arg423[i]
...         i = (i + 1) % len(arg423)        
...     
...     return &quot;&quot;.join([chr(ord(arg422) ^ ord(arg442)) for (arg422,arg442) in zip(arg432,arg433)])
... 
&gt;&gt;&gt; print(arg122(arg444.decode(), a[81]+a[64]+a[79]+a[82]+a[66]+a[64]+a[75]+\)
  File &quot;&lt;input&gt;&quot;, line 1
    print(arg122(arg444.decode(), a[81]+a[64]+a[79]+a[82]+a[66]+a[64]+a[75]+\)
                                                                             ^
SyntaxError: unexpected character after line continuation character
&gt;&gt;&gt; a[75]+a[72]+a[78]+a[77])
  File &quot;&lt;input&gt;&quot;, line 1
    a[75]+a[72]+a[78]+a[77])
                           ^
SyntaxError: unmatched ')'
&gt;&gt;&gt; print(arg122(arg444.decode(), a[81]+a[64]+a[79]+a[82]+a[66]+a[64]+a[75]+\)
  File &quot;&lt;input&gt;&quot;, line 1
    print(arg122(arg444.decode(), a[81]+a[64]+a[79]+a[82]+a[66]+a[64]+a[75]+\)
                                                                             ^
SyntaxError: unexpected character after line continuation character
&gt;&gt;&gt; a[75]+a[72]+a[78]+a[77])
  File &quot;&lt;input&gt;&quot;, line 1
    a[75]+a[72]+a[78]+a[77])
                           ^
SyntaxError: unmatched ')'
&gt;&gt;&gt; print(arg122(arg444.decode(), a[81]+a[64]+a[79]+a[82]+a[66]+a[64]+a[75]+a[75]+a[72]+a[78]+a[77]))
Traceback (most recent call last):
  File &quot;&lt;input&gt;&quot;, line 1, in &lt;module&gt;
    print(arg122(arg444.decode(), a[81]+a[64]+a[79]+a[82]+a[66]+a[64]+a[75]+a[75]+a[72]+a[78]+a[77]))
NameError: name 'arg444' is not defined
&gt;&gt;&gt; arg444 = arg132()
Traceback (most recent call last):
  File &quot;&lt;input&gt;&quot;, line 1, in &lt;module&gt;
    arg444 = arg132()
NameError: name 'arg132' is not defined
&gt;&gt;&gt; def arg132():
...   return open('flag.txt.enc', 'rb').read()
... 
&gt;&gt;&gt; arg444 = arg132()
&gt;&gt;&gt; print(arg122(arg444.decode(), a[81]+a[64]+a[79]+a[82]+a[66]+a[64]+a[75]+a[75]+a[72]+a[78]+a[77]))
picoCTF{d30bfu5c4710n_f7w_e9e38c27}
</code></pre>
<p>So the flag is:</p>
<pre><code>picoCTF{d30bfu5c4710n_f7w_e9e38c27}
</code></pre>
]]></description></item></channel></rss>