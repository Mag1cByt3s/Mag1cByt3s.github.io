<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>picoctf on Pascals Blog</title><link>https://blog.ppeinecke.de/tags/picoctf/</link><description>Recent content in picoctf on Pascals Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 06 Apr 2022 16:12:40 +0200</lastBuildDate><atom:link href="https://blog.ppeinecke.de/tags/picoctf/index.xml" rel="self" type="application/rss+xml"/><item><title>picoCTF - Web Exploitation - SQLiLite</title><link>https://blog.ppeinecke.de/posts/picoctf-web-exploitation-sqlilite/</link><pubDate>Wed, 06 Apr 2022 16:12:40 +0200</pubDate><guid>https://blog.ppeinecke.de/posts/picoctf-web-exploitation-sqlilite/</guid><description>Web Exploitation - SQLiLite - writeup description Can you login to this website?
Try to login here.
writeup Once i visit the website http://saturn.picoctf.net:60431/ in firefox I can see a login form with a username and a password field.
My first attempt was to use the username &amp;lsquo;admin&amp;rsquo; and try a basic sql injection.
So I input in the username field this:
admin&amp;#39;-- the single quote is here to end the input of the text box.</description></item><item><title>picoCTF - Web Exploitation - SQL Direct</title><link>https://blog.ppeinecke.de/posts/picoctf-web-exploitation-sql-direct/</link><pubDate>Wed, 06 Apr 2022 16:10:25 +0200</pubDate><guid>https://blog.ppeinecke.de/posts/picoctf-web-exploitation-sql-direct/</guid><description>Web Exploitation - SQL Direct - writeup description Connect to this PostgreSQL server and find the flag!
psql -h saturn.picoctf.net -p 49248 -U postgres pico
Password is postgres
writeup Ok let&amp;rsquo;s first connect to the database server:
psql -h saturn.picoctf.net -p 49248 -U postgres pico the password is &amp;lsquo;postgres&amp;rsquo;
Let&amp;rsquo;s list all databases first
pico=# \l List of databases Name | Owner | Encoding | Collate | Ctype | Access privileges -----------+----------+----------+------------+------------+----------------------- pico | postgres | UTF8 | en_US.</description></item><item><title>picoCTF - Web Exploitation - Search source</title><link>https://blog.ppeinecke.de/posts/picoctf-web-exploitation-search-source/</link><pubDate>Wed, 06 Apr 2022 16:08:45 +0200</pubDate><guid>https://blog.ppeinecke.de/posts/picoctf-web-exploitation-search-source/</guid><description>Web Exploitation - Search Source - writeup description The developer of this website mistakenly left an important artifact in the website source, can you find it? The website is here
writeup I was not able to find anything interesting on the website by just looking at the source code in the browser.
So let&amp;rsquo;s clone the website first using HTTrack so we can take a look at the full source.</description></item><item><title>picoCTF - Web Exploitation - Power Cookie</title><link>https://blog.ppeinecke.de/posts/picoctf-web-exploitation-power-cookie/</link><pubDate>Wed, 06 Apr 2022 16:04:26 +0200</pubDate><guid>https://blog.ppeinecke.de/posts/picoctf-web-exploitation-power-cookie/</guid><description>Web Exploitation - Power Cookie - writeup description Can you get the flag? Go to this website and see what you can discover.
writeup Looking at the check.php function I can see that it requests a cookie &amp;lsquo;isAdmin&amp;rsquo;.
That cookie is not present at the first visit of the page.
So lets refresh the webpage.
Now the cookie is present.
The value of this particuluar cookie is &amp;lsquo;0&amp;rsquo; currently.
So lets change it to &amp;lsquo;1&amp;rsquo; and refresh the page once more.</description></item><item><title>picoCTF - Web Exploitation - Local Authority</title><link>https://blog.ppeinecke.de/posts/picoctf-web-exploitation-local-authority/</link><pubDate>Wed, 06 Apr 2022 15:58:43 +0200</pubDate><guid>https://blog.ppeinecke.de/posts/picoctf-web-exploitation-local-authority/</guid><description>Web Exploitation - Local Authority - writeup description Can you get the flag? Go to this website and see what you can discover.
writeup Once I open the link http://saturn.picoctf.net:51419/ in firefox I get to a page &amp;ldquo;Secure Customer Portal&amp;rdquo;.
I can see a login form with username and password.
On the website I see a hint:
Only letters and numbers allowed for username and password.
I tried to do a simple post request to the login.</description></item><item><title>picoCTF - Web Exploitation - Inspect HTML</title><link>https://blog.ppeinecke.de/posts/picoctf-web-exploitation-inspect-html/</link><pubDate>Wed, 06 Apr 2022 15:51:22 +0200</pubDate><guid>https://blog.ppeinecke.de/posts/picoctf-web-exploitation-inspect-html/</guid><description>Web Exploitation - Includes - writeup description Can you get the flag? Go to this website and see what you can discover.
writeup Once I opened the website http://saturn.picoctf.net:60935/ in firefox and looking at the source code I could immediately find the flag inside a comment in the html source code:
&amp;lt;!--picoCTF{1n5p3t0r_0f_h7ml_ab1df88d}--&amp;gt; So the flag is:
picoCTF{1n5p3t0r_0f_h7ml_ab1df88d}</description></item><item><title>picoCTF - Web Exploitation - Includes</title><link>https://blog.ppeinecke.de/posts/picoctf-web-exploitation-includes/</link><pubDate>Wed, 06 Apr 2022 15:42:26 +0200</pubDate><guid>https://blog.ppeinecke.de/posts/picoctf-web-exploitation-includes/</guid><description>Web Exploitation - Includes - writeup description Can you get the flag? Go to this website and see what you can discover.
writeup Ok so I went ahead and visited the url http://saturn.picoctf.net:52811/ in firefox.
I am presente with a webpage with a bunch of text and a button that says &amp;ldquo;Say hello&amp;rdquo;.
Once I press that button I get a javascript alert() popup that says &amp;ldquo;This code is in a separate file!</description></item><item><title>picoCTF - Reverse Engineering - unpackme.py</title><link>https://blog.ppeinecke.de/posts/picoctf-reverse-engineering-unpackme.py/</link><pubDate>Wed, 06 Apr 2022 15:29:28 +0200</pubDate><guid>https://blog.ppeinecke.de/posts/picoctf-reverse-engineering-unpackme.py/</guid><description>Reverse Engineering - unpackme.py - writeup description Can you get the flag?
Reverse engineer this Python program.
writeup Let&amp;rsquo;s download the python program first.
wget https://artifacts.picoctf.net/c/470/unpackme.flag.py I will try to reverse engineer this python code &amp;hellip;
If we take a look at the code:
import base64 from cryptography.fernet import Fernet payload = b&amp;#39;gAAAAABiMD1Ju5_eZeZy7C03K_YcWGDGXfvy5A9b5HzV-uZIYN8syTFGHgLwoRonYtCS0WcDrufxRRXlvNKtyEMqMS0AADLcRNr6VYpLLbKaETF37L22GEg1ok8NutHXK6gy47sBLmxmWWU729b86rzK6IMc2Kg-CR0bMm_fzrbRrWEYSk0WRNnKxy7Juuy-Ss2RjbACKgbwL7HNGATu3hYuPflf3PCKztLRFXCBxijKncKZgt68wYhGnPAzYvUVrdhhtMg9ra7ZKIirltPfKC8iX2DqmR9vVA==&amp;#39; key_str = &amp;#39;correctstaplecorrectstaplecorrec&amp;#39; key_base64 = base64.b64encode(key_str.encode()) f = Fernet(key_base64) plain = f.decrypt(payload) exec(plain.decode()) We can see that some part of the code is missing.</description></item><item><title>picoCTF - Reverse Engineering - Safe Opener</title><link>https://blog.ppeinecke.de/posts/picoctf-reverse-engineering-safe-opener/</link><pubDate>Wed, 06 Apr 2022 15:27:09 +0200</pubDate><guid>https://blog.ppeinecke.de/posts/picoctf-reverse-engineering-safe-opener/</guid><description>Reverse Engineering - Safe Opener - writeup description Can you open this safe?
I forgot the key to my safe but this program is supposed to help me with retrieving the lost key.
Can you help me unlock my safe?
Put the password you recover into the picoCTF flag format like: picoCTF{password}
writeup The &amp;ldquo;safe&amp;rdquo; is a .java file.
Since .java is used for java source code this should be fairly easy to reverse engineer.</description></item><item><title>picoCTF - Reverse Engineering - patchme.py</title><link>https://blog.ppeinecke.de/posts/picoctf-reverse-engineering-patchme.py/</link><pubDate>Wed, 06 Apr 2022 15:25:17 +0200</pubDate><guid>https://blog.ppeinecke.de/posts/picoctf-reverse-engineering-patchme.py/</guid><description>Reverse Engineering - patchme.py - writeup description Can you get the flag?
Run this Python program in the same directory as this encrypted flag.
writeup Let&amp;rsquo;s take a look at the encrypted flag&amp;hellip;
cat flag.txt.enc CR1@ UYX+ 6UB P\E That does not help.
Let&amp;rsquo;s look at the python code&amp;hellip;
Mh that is peculiar:
if( user_pw == &amp;#34;ak98&amp;#34; + \ &amp;#34;-=90&amp;#34; + \ &amp;#34;adfjhgj321&amp;#34; + \ &amp;#34;sleuth9000&amp;#34;) Let&amp;rsquo;s fire up bpython and input this code:</description></item><item><title>picoCTF - Reverse Engineering - file-run2</title><link>https://blog.ppeinecke.de/posts/picoctf-reverse-engineering-file-run2/</link><pubDate>Wed, 06 Apr 2022 15:23:34 +0200</pubDate><guid>https://blog.ppeinecke.de/posts/picoctf-reverse-engineering-file-run2/</guid><description>Reverse Engineering - file-run2 - writeup description Another program, but this time, it seems to want some input. What happens if you try to run it on the command line with input &amp;ldquo;Hello!&amp;rdquo;?
Download the program here.
writeup by simply executing the file with ./run we get
Run this file with only one argument. if I try to supply one argument like this: ./run 1 I get
Won&amp;#39;t you say &amp;#39;Hello!</description></item><item><title>picoCTF - Reverse Engineering - file-run1</title><link>https://blog.ppeinecke.de/posts/picoctf-reverse-engineering-file-run1/</link><pubDate>Wed, 06 Apr 2022 15:19:34 +0200</pubDate><guid>https://blog.ppeinecke.de/posts/picoctf-reverse-engineering-file-run1/</guid><description>Reverse Engineering - file-run1 - writeup description A program has been provided to you, what happens if you try to run it on the command line?
Download the program here.
https://artifacts.picoctf.net/c/314/run
writeup by simply running the program we get the flag:
The flag is: picoCTF{U51N6_Y0Ur_F1r57_F113_ac61264e}</description></item><item><title>picoCTF - Reverse Engineering - bloat.py</title><link>https://blog.ppeinecke.de/posts/picoctf-reverse-engineering-bloat.py/</link><pubDate>Wed, 06 Apr 2022 15:16:12 +0200</pubDate><guid>https://blog.ppeinecke.de/posts/picoctf-reverse-engineering-bloat.py/</guid><description>Reverse Engineering - bloat.py - writeup description Can you get the flag?
Run this Python program in the same directory as this encrypted flag.
writeup So let&amp;rsquo;s download the python program and the encrypted flag first!
wget https://artifacts.picoctf.net/c/434/bloat.flag.py wget https://artifacts.picoctf.net/c/434/flag.txt.enc Let&amp;rsquo;s make a copy of the python program and try to fix it using debugging in bpython!
cp bloat.flag.py flag.py After a lot of debugging and reverse engineering using bpython I found the flag!</description></item><item><title>picoCTF - Reverse Engineering - Bbbbloat</title><link>https://blog.ppeinecke.de/posts/picoctf-reverse-engineering-bbbbloat/</link><pubDate>Wed, 06 Apr 2022 15:12:22 +0200</pubDate><guid>https://blog.ppeinecke.de/posts/picoctf-reverse-engineering-bbbbloat/</guid><description>Forensics - Bbbbloat - writeup description Can you get the flag?
Reverse engineer this binary.
writeup After loading the binary into Ghidra and browsing the decompiled code I noticed this function:
undefined8 FUN_00101307(void) { char *__s; long in_FS_OFFSET; int local_48; undefined8 local_38; undefined8 local_30; undefined8 local_28; undefined8 local_20; long local_10; local_10 = *(long *)(in_FS_OFFSET + 0x28); local_38 = 0x4c75257240343a41; local_30 = 0x3062396630664634; local_28 = 0x33343066635f3d33; local_20 = 0x4e5f3463665f34; printf(&amp;#34;What\&amp;#39;s my favorite number?</description></item><item><title>picoCTF - Forensics - St3g0</title><link>https://blog.ppeinecke.de/posts/picoctf-forensics-st3g0/</link><pubDate>Wed, 06 Apr 2022 15:08:21 +0200</pubDate><guid>https://blog.ppeinecke.de/posts/picoctf-forensics-st3g0/</guid><description>Forensics - St3g0 - writeup description Download this image and find the flag.
Download image
writeup Ok so let&amp;rsquo;s download the file first &amp;hellip;
wget https://artifacts.picoctf.net/c/427/pico.flag.png Let&amp;rsquo;s check the file type just to make sure we actually have a .png file here &amp;hellip;
file pico.flag.png pico.flag.png: PNG image data, 585 x 172, 8-bit/color RGBA, non-interlaced Ok so it is in fact a PNG file.
Let&amp;rsquo;s check for any steganography using stegdetect</description></item><item><title>picoCTF - Forensics - Sleuthkit Apprentice</title><link>https://blog.ppeinecke.de/posts/picoctf-forensics-sleuthkit-apprentice/</link><pubDate>Wed, 06 Apr 2022 15:05:06 +0200</pubDate><guid>https://blog.ppeinecke.de/posts/picoctf-forensics-sleuthkit-apprentice/</guid><description>Forensics - Sleuthkit Apprentice - writeup description Download this disk image and find the flag. Note: if you are using the webshell, download and extract the disk image into /tmp not your home directory.
Download compressed disk image
writeup So we a got a file &amp;lsquo;disk.flag.img&amp;rsquo;.
I will try to create a folder and mount the disk image into that folder first.
mkdir mnt mount ./disk.flag.img mnt mount: mnt: failed to setup loop device for /home/pascal/Pentesting/picoCTF_2022/Forensics/Sleuthkit Apprentice/disk.</description></item><item><title>picoCTF - Forensics - Packets Primer</title><link>https://blog.ppeinecke.de/posts/picoctf-forensics-packets-primer/</link><pubDate>Wed, 06 Apr 2022 14:51:19 +0200</pubDate><guid>https://blog.ppeinecke.de/posts/picoctf-forensics-packets-primer/</guid><description>Forensics - Packets Primer - writeup description Download the packet capture file and use packet analysis software to find the flag.
Download packet capture
writeup Ok so we got a .pcap file as a download:
network-dump.flag.pcap Lets look at the content using wireshark.
wireshark -r network-dump.flag.pcap I found some interesting traffic:
4 0.001225 10.0.2.15 10.0.2.4 TCP 126 48750 → 9000 [PSH, ACK] Seq=1 Ack=1 Win=64256 Len=60 TSval=2379213157 TSecr=1760620995 Looking at the hex dump of that transaction I can see the following:</description></item><item><title>picoCTF - Forensics - Redaction gone wrong</title><link>https://blog.ppeinecke.de/posts/picoctf-forensics-redaction-gone-wrong/</link><pubDate>Wed, 06 Apr 2022 14:51:19 +0200</pubDate><guid>https://blog.ppeinecke.de/posts/picoctf-forensics-redaction-gone-wrong/</guid><description>Forensics - Redaction gone wrong - writeup description Now you DON’T see me. This report has some critical data in it, some of which have been redacted correctly, while some were not. Can you find an important key that was not redacted properly?
writeup By simply opening the pdf file in LibreOffice Draw I was able to move the black boxes to uncover the flag!
The flag is:
picoCTF{C4n_Y0u_S33_m3_fully}</description></item><item><title>picoCTF - Forensics - Operation Orchid</title><link>https://blog.ppeinecke.de/posts/picoctf-forensics-operation-orchid/</link><pubDate>Wed, 06 Apr 2022 14:49:28 +0200</pubDate><guid>https://blog.ppeinecke.de/posts/picoctf-forensics-operation-orchid/</guid><description>Forensics - Operation Orchid - writeup description Download this disk image and find the flag.
Note: if you are using the webshell, download and extract the disk image into /tmp not your home directory.
https://artifacts.picoctf.net/c/242/disk.flag.img.gz
writeup Ok let&amp;rsquo;s download the image first!
wget https://artifacts.picoctf.net/c/242/disk.flag.img.gz Next I will extract it.
gunzip disk.flag.img.gz file disk.flag.img disk.flag.img: DOS/MBR boot sector; partition 1 : ID=0x83, active, start-CHS (0x0,32,33), end-CHS (0xc,223,19), startsector 2048, 204800 sectors; partition 2 : ID=0x82, start-CHS (0xc,223,20), end-CHS (0x19,159,6), startsector 206848, 204800 sectors; partition 3 : ID=0x83, start-CHS (0x19,159,7), end-CHS (0x32,253,11), startsector 411648, 407552 sectors That is a dos / mbr boot partition</description></item><item><title>picoCTF - Forensics - Operation Oni</title><link>https://blog.ppeinecke.de/posts/picoctf-forensics-operation-oni/</link><pubDate>Wed, 06 Apr 2022 14:47:15 +0200</pubDate><guid>https://blog.ppeinecke.de/posts/picoctf-forensics-operation-oni/</guid><description>Forensics - Operation Oni - writeup description Download this disk image, find the key and log into the remote machine.
Note: if you are using the webshell, download and extract the disk image into /tmp not your home directory.
writeup So I went ahead, fired up the remote machine and downloaded the disk image.
wget https://artifacts.picoctf.net/c/372/disk.img.gz It is gzip compressed so I first had to decompress it
gunzip disk.img.gz Now I have a &amp;lsquo;disk.</description></item><item><title>picoCTF - Forensics - Lookey Here</title><link>https://blog.ppeinecke.de/posts/picoctf-forensics-lookey-here/</link><pubDate>Wed, 06 Apr 2022 14:25:47 +0200</pubDate><guid>https://blog.ppeinecke.de/posts/picoctf-forensics-lookey-here/</guid><description>Forensics - Lookey here - writeup description Attackers have hidden information in a very large mass of data in the past, maybe they are still doing it. Download the data here.
writeup looking at the content of the txt file I can see a lot of random text&amp;hellip;
head anthem.flag.txt ANTHEM by Ayn Rand CONTENTS PART ONE PART TWO By simply grepping out picoCTF I could find the flag
cat anthem.</description></item><item><title>picoCTF - Forensics - File types</title><link>https://blog.ppeinecke.de/posts/picoctf-forensics-file-types/</link><pubDate>Wed, 06 Apr 2022 14:21:10 +0200</pubDate><guid>https://blog.ppeinecke.de/posts/picoctf-forensics-file-types/</guid><description>Forensics - File types - writeup description This file was found among some files marked confidential but my pdf reader cannot read it, maybe yours can. You can download the file from here.
writeup Let&amp;rsquo;s download the file!
wget https://artifacts.picoctf.net/c/329/Flag.pdf lets see what file we got here&amp;hellip;
file Flag.pdf Flag.pdf: shell archive text Looks like this is a shell archive file (.shar)
lets rename the file to a proper file extension first.</description></item><item><title>picoCTF - Forensics - Enhance!</title><link>https://blog.ppeinecke.de/posts/picoctf-forensics-enhance/</link><pubDate>Wed, 06 Apr 2022 14:18:09 +0200</pubDate><guid>https://blog.ppeinecke.de/posts/picoctf-forensics-enhance/</guid><description>Forensics - Enhance! - writeup description Download this image file and find the flag.
Download image file
writeup Ok so I downloaded the image file drawing.flag.svg
Checking with the file command what that actually is:
file drawing.flag.svg drawing.flag.svg: SVG Scalable Vector Graphics image looks like it is actually a svg file.
Lets try to open it using feh e.g.
feh drawing.flag.svg feh WARNING: drawing.flag.svg - Does not look like an image (magic bytes missing) feh tells me that the magic bytes are missing.</description></item><item><title>picoCTF - Forensics - Eavesdrop</title><link>https://blog.ppeinecke.de/posts/picoctf-forensics-eavesdrop/</link><pubDate>Wed, 06 Apr 2022 14:13:00 +0200</pubDate><guid>https://blog.ppeinecke.de/posts/picoctf-forensics-eavesdrop/</guid><description>Forensics - Eavesdrop - writeup description Download this packet capture and find the flag.
Download packet capture
writeup Let&amp;rsquo;s first download this file: https://artifacts.picoctf.net/c/364/capture.flag.pcap
wget https://artifacts.picoctf.net/c/364/capture.flag.pcap --2022-03-17 18:29:49-- https://artifacts.picoctf.net/c/364/capture.flag.pcap Resolving artifacts.picoctf.net (artifacts.picoctf.net)... 108.157.4.16, 108.157.4.118, 108.157.4.13, ... Connecting to artifacts.picoctf.net (artifacts.picoctf.net)|108.157.4.16|:443... connected. HTTP request sent, awaiting response... 200 OK Length: 7518 (7.3K) [application/octet-stream] Saving to: &amp;#39;capture.flag.pcap&amp;#39; capture.flag.pcap 100%[=======================================&amp;gt;] 7.34K --.-KB/s in 0s 2022-03-17 18:29:50 (92.7 MB/s) - &amp;#39;capture.flag.pcap&amp;#39; saved [7518/7518] Ok so we have a file called &amp;lsquo;capture.</description></item><item><title>picoCTF - Cryptography - Morse Code</title><link>https://blog.ppeinecke.de/posts/picoctf-cryptography-morse-code/</link><pubDate>Wed, 06 Apr 2022 14:07:33 +0200</pubDate><guid>https://blog.ppeinecke.de/posts/picoctf-cryptography-morse-code/</guid><description>Cryptography - morse-code - writeup description Morse code is well known. Can you decrypt this? Download the file here. Wrap your answer with picoCTF{}, put underscores in place of pauses, and use all lowercase.
writeup Opening the file in ghex or sonic visualizer did not help
After reading the following article I decided to try to open it using audacity.
https://dropn0w.medium.com/do-the-loop-downunderctf-2021-5d8ee86c0f2b
Next I tried to interpret the waves as morse code.</description></item><item><title>picoCTF - Cryptography - credstuff</title><link>https://blog.ppeinecke.de/posts/picoctf-cryptography-credstuff/</link><pubDate>Wed, 06 Apr 2022 14:02:03 +0200</pubDate><guid>https://blog.ppeinecke.de/posts/picoctf-cryptography-credstuff/</guid><description>Cryptography - credstuff - writeup description We found a leak of a blackmarket website&amp;rsquo;s login credentials. Can you find the password of the user cultiris and successfully decrypt it? Download the leak here. The first user in usernames.txt corresponds to the first password in passwords.txt. The second user corresponds to the second password, and so on.
writeup let&amp;rsquo;s write a python program that finds the corresponding password for the user &amp;lsquo;cultiris&amp;rsquo;</description></item><item><title>picoCTF - Cryptography - basic-mod1</title><link>https://blog.ppeinecke.de/posts/picoctf-cryptography-basic-mod1/</link><pubDate>Wed, 06 Apr 2022 13:58:41 +0200</pubDate><guid>https://blog.ppeinecke.de/posts/picoctf-cryptography-basic-mod1/</guid><description>Cryptography - basic-mod1 - writeup description We found this weird message being passed around on the servers, we think we have a working decrpytion scheme. Download the message here. Take each number mod 37 and map it to the following character set: 0-25 is the alphabet (uppercase), 26-35 are the decimal digits, and 36 is an underscore. Wrap your decrypted message in the picoCTF flag format (i.e. picoCTF{decrypted_message})
writeup Lets write a simple python program which reads the message into a string first.</description></item><item><title>picoCTF - Binary Exploitation - Buffer Overflow 0</title><link>https://blog.ppeinecke.de/posts/picoctf-binary-exploitation-buffer-overflow-0/</link><pubDate>Wed, 06 Apr 2022 13:50:56 +0200</pubDate><guid>https://blog.ppeinecke.de/posts/picoctf-binary-exploitation-buffer-overflow-0/</guid><description>Binary Exploitation - buffer overflow 0 - writeup Description Smash the stack
Let&amp;rsquo;s start off simple, can you overflow the correct buffer?
The program is available here.
You can view source here.
And connect with it using: nc saturn.picoctf.net 57331
Writeup First I checked the strings of the binary file using the strings command but unfortunately I did not find anything interesting.
Let&amp;rsquo;s fire up Ghidra and see what we&amp;rsquo;ve got here &amp;hellip;</description></item></channel></rss>